{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#python-moodle","title":"python-moodle","text":"<p>A modern Pythonic CLI and library to manage Moodle via web sessions, with full session and CAS support.</p> <p>Experimental</p> <p>This library is under active development. Use a test Moodle instance and back up data before running commands that create, modify, or delete content.</p> <p><code>py-moodle</code> allows you to automate tedious Moodle tasks\u2014like creating courses, uploading content, and managing modules\u2014directly from your terminal or in your Python scripts. It works by simulating a real user's web session, so it doesn't require API tokens or special Moodle plugins.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Manage Moodle entities: Courses, sections, users, and modules from the command line.</li> <li>Rich module support: Includes built-in support for Folders, Labels, Assignments, and SCORM packages.</li> <li>Session-based: Works with standard Moodle web sessions, avoiding the need for web service tokens.</li> <li>Authentication: Supports standard Moodle login and SSO/CAS authentication.</li> <li>Dual Use: Can be used as a powerful CLI or imported as a library into your own Python projects.</li> <li>Extensible: Designed to be easily extended with new modules and commands. See <code>AGENTS.md</code>.</li> <li>English-only codebase: For clear, global collaboration.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You will need Python 3.8+ and <code>pip</code>.</p>"},{"location":"#install-from-pypi-recommended","title":"Install from PyPI (Recommended)","text":"<pre><code>pip install python-moodle\n</code></pre>"},{"location":"#install-from-source","title":"Install from Source","text":"<p>Clone the repository and install:</p> <pre><code>git clone https://github.com/erseco/python-moodle.git\ncd python-moodle\npip install .\n</code></pre>"},{"location":"#configure-your-environment","title":"Configure your environment","text":"<p>Copy the example <code>.env.example</code> file to <code>.env</code> and add your Moodle instance credentials.</p> <pre><code>cp .env.example .env\n# Now, edit the .env file with your credentials\n</code></pre> <p>Danger</p> <p>The <code>.env</code> file stores real credentials. Keep it out of version control and share it with no one.</p> <p>Your <code>.env</code> file should look like this:</p> <pre><code># Production environment credentials\nMOODLE_PROD_URL=https://your.moodle.site\nMOODLE_PROD_USERNAME=your_admin_user\nMOODLE_PROD_PASSWORD=your_super_secret_password\n# Optional: CAS SSO URL\n# MOODLE_PROD_CAS_URL=https://cas.your-institution.org/cas\n# Optional: Predefined webservice token (required for CAS)\n# MOODLE_PROD_WS_TOKEN=your_webservice_token\n</code></pre> <p>Use the <code>--env</code> flag or the <code>MOODLE_ENV</code> variable to select the environment, e.g. <code>py-moodle --env prod courses list</code>.</p> <p>Note: For local development, you can quickly spin up a Moodle instance using the provided <code>docker-compose.yml</code>: <code>docker-compose up -d</code>.</p>"},{"location":"#cli-usage","title":"CLI Usage","text":"<p>Once installed, all functionality is available through the <code>py-moodle</code> command. Every command and subcommand includes detailed help with the <code>-h</code> or <code>--help</code> flag.</p>"},{"location":"#common-commands","title":"Common Commands","text":"<p>Here are a few examples of common commands:</p> <p>List all available courses:</p> <pre><code>py-moodle courses list\n</code></pre> <p>Output:</p> <pre><code>\u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 ID \u2503 Shortname          \u2503 Fullname           \u2503 Category \u2503 Visible \u2503\n\u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 2  \u2502 my-first-course    \u2502 My first course    \u2502 1        \u2502 1       \u2502\n\u2502 4  \u2502 my-second-course   \u2502 My second course   \u2502 1        \u2502 1       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Show the structure of a single course:</p> <pre><code>py-moodle courses show 2\n</code></pre> <p>Create a new course:</p> <pre><code>py-moodle courses create --fullname \"My New Automated Course\" --shortname \"auto-course-01\"\n</code></pre> <p>Add a label to a course section:</p> <pre><code>py-moodle modules add label --course-id 2 --section-id 1 --name \"Welcome\" --intro \"&lt;h1&gt;Welcome to the course!&lt;/h1&gt;\"\n</code></pre> <p>Upload a SCORM package to a course:</p> <pre><code>py-moodle modules add scorm --course-id 2 --section-id 1 --name \"My SCORM Package\" --path \"path/to/your/scorm.zip\"\n</code></pre>"},{"location":"#library-usage-automation-scripting","title":"Library Usage (Automation Scripting)","text":"<p>You can also import <code>py-moodle</code>'s functions into your own Python scripts to automate complex workflows. The <code>example_script.py</code> file provides a comprehensive tutorial.</p>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from py_moodle import MoodleSession\nfrom py_moodle.course import list_courses\n\n# Credentials are loaded automatically from your .env file\nms = MoodleSession.get()\ncourses = list_courses(ms.session, ms.settings.url, token=ms.token)\nfor course in courses:\n    print(course[\"id\"], course[\"fullname\"])\n</code></pre>"},{"location":"#how-the-example-script-works","title":"How the Example Script Works","text":"<p>The script is a self-contained demonstration that:</p> <ol> <li>Logs into Moodle using the credentials from your <code>.env</code> file.</li> <li>Creates a new, temporary course.</li> <li>Populates the course with sections, labels, assignments, and a SCORM package.</li> <li>Creates a folder and uploads multiple files to it.</li> <li>Prints a summary of the final course structure.</li> <li>Automatically cleans up and deletes the course and all its contents.</li> </ol>"},{"location":"#running-the-example","title":"Running the Example","text":"<p>Make sure you have a valid <code>.env</code> file and have installed the dependencies. Then, simply run:</p> <pre><code>python example_script.py\n</code></pre> <p>This script is the best starting point for understanding how to use the library's functions for your own automation needs.</p>"},{"location":"#testing","title":"Testing","text":"<p>The project uses <code>pytest</code> and provides a <code>Makefile</code> with convenient targets.</p> <p>Run the default test suite against the local environment:</p> <pre><code>make test-local\n</code></pre> <p>Run tests against the staging environment:</p> <pre><code>make test-staging\n</code></pre> <p>Run all configured environments:</p> <pre><code>make test\n</code></pre>"},{"location":"#development","title":"Development","text":"<p>Use the Makefile to format code, run linters, or build the documentation:</p> <pre><code>make format   # run black and isort\nmake lint     # run static analysis\nmake docs     # build the MkDocs site\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>Documentation is generated with MkDocs using the Read the Docs theme and published automatically to the <code>gh-pages</code> branch. Every push to <code>main</code> builds the API reference and CLI guide from the source code and makes it available via GitHub Pages.</p> <p>To build the documentation locally:</p> <pre><code>pip install mkdocs 'mkdocstrings[python]'\nmkdocs build --strict\n</code></pre> <p>The rendered site will be available under the <code>site/</code> directory.</p>"},{"location":"#contribution","title":"Contribution","text":"<p>Contributions are welcome! Please follow the guidelines outlined in [AGENTS.md]. Key principles include:</p> <ul> <li>All code, comments, and documentation must be in English.</li> <li>Code must be formatted with <code>black</code> and linted with <code>flake8</code>.</li> <li>Docstrings must use the Google style; <code>flake8-docstrings</code> is configured for this convention.</li> <li>The CLI should be a thin layer over the core library functions.</li> <li>All new features must be accompanied by tests.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"cli/","title":"<code>py-moodle</code>","text":"<p>A CLI to manage Moodle via AJAX sessions and web services.</p> <p>Usage:</p> <pre><code>$ py-moodle [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>-e, --env TEXT</code>: Environment to use: local | staging | prod (also respects MOODLE_ENV)  [default: local]</li> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>courses</code>: Manage courses: list, show, create, delete.</li> <li><code>categories</code>: Manage course categories: list, create,...</li> <li><code>sections</code>: Manage course sections: list, show,...</li> <li><code>modules</code>: Manage course modules...</li> <li><code>users</code>: Manage Moodle users: list, create, delete.</li> <li><code>admin</code>: Moodle site administration tasks.</li> <li><code>folders</code>: Manage folder modules: create, delete, and...</li> <li><code>pages</code>: Manage page modules: create and delete...</li> <li><code>resources</code>: Manage resource modules: create and delete...</li> <li><code>urls</code>: Manage URL modules: create and delete...</li> <li><code>site</code>: Get site information.</li> </ul>"},{"location":"cli/#py-moodle-courses","title":"<code>py-moodle courses</code>","text":"<p>Manage courses: list, show, create, delete.</p> <p>Usage:</p> <pre><code>$ py-moodle courses [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>list</code>: Lists all available courses.</li> <li><code>show</code>: Shows a detailed summary of a specific...</li> <li><code>create</code>: Creates a new course.</li> <li><code>delete</code>: Deletes a course by its ID.</li> </ul>"},{"location":"cli/#py-moodle-courses-list","title":"<code>py-moodle courses list</code>","text":"<p>Lists all available courses.</p> <p>Usage:</p> <pre><code>$ py-moodle courses list [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--json</code>: Display output in JSON format.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-courses-show","title":"<code>py-moodle courses show</code>","text":"<p>Shows a detailed summary of a specific course, including its sections and modules.</p> <p>Usage:</p> <pre><code>$ py-moodle courses show [OPTIONS] COURSE_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>COURSE_ID</code>: ID of the course to show.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--json</code>: Output in JSON format.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-courses-create","title":"<code>py-moodle courses create</code>","text":"<p>Creates a new course.</p> <p>Usage:</p> <pre><code>$ py-moodle courses create [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--fullname TEXT</code>: Full name for the new course.  [required]</li> <li><code>--shortname TEXT</code>: Short name for the new course.  [required]</li> <li><code>--categoryid INTEGER</code>: Category ID for the new course.  [default: 1]</li> <li><code>--visible INTEGER</code>: 1 for visible, 0 for hidden.  [default: 1]</li> <li><code>--summary TEXT</code>: Course summary.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-courses-delete","title":"<code>py-moodle courses delete</code>","text":"<p>Deletes a course by its ID.</p> <p>Usage:</p> <pre><code>$ py-moodle courses delete [OPTIONS] COURSE_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>COURSE_ID</code>: ID of the course to delete.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--force</code>: Delete without asking for confirmation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-categories","title":"<code>py-moodle categories</code>","text":"<p>Manage course categories: list, create, delete.</p> <p>Usage:</p> <pre><code>$ py-moodle categories [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>list</code>: Lists all available course categories.</li> <li><code>create</code>: Creates a new course category.</li> <li><code>delete</code>: Deletes a course category by its ID.</li> </ul>"},{"location":"cli/#py-moodle-categories-list","title":"<code>py-moodle categories list</code>","text":"<p>Lists all available course categories.</p> <p>Usage:</p> <pre><code>$ py-moodle categories list [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--json</code>: Output in JSON format.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-categories-create","title":"<code>py-moodle categories create</code>","text":"<p>Creates a new course category. This operation uses a session key (sesskey) and does not require a webservice token.</p> <p>Usage:</p> <pre><code>$ py-moodle categories create [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--name TEXT</code>: Name for the new category.  [required]</li> <li><code>--parent-id INTEGER</code>: Parent category ID (default: 0 for top level).  [default: 0]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-categories-delete","title":"<code>py-moodle categories delete</code>","text":"<p>Deletes a course category by its ID. The category must be empty. This operation uses a session key (sesskey).</p> <p>Usage:</p> <pre><code>$ py-moodle categories delete [OPTIONS] CATEGORY_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>CATEGORY_ID</code>: ID of the category to delete.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--force</code>: Delete without a confirmation prompt.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-sections","title":"<code>py-moodle sections</code>","text":"<p>Manage course sections: list, show, create, delete.</p> <p>Usage:</p> <pre><code>$ py-moodle sections [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>list</code>: Lists a summary of all sections in a...</li> <li><code>show</code>: Shows detailed information of a specific...</li> <li><code>create</code>: Creates a new section at the end of a course.</li> <li><code>delete</code>: Deletes a specific section by its ID.</li> </ul>"},{"location":"cli/#py-moodle-sections-list","title":"<code>py-moodle sections list</code>","text":"<p>Lists a summary of all sections in a specific course.</p> <p>Usage:</p> <pre><code>$ py-moodle sections list [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--course-id INTEGER</code>: ID of the course to list sections from.  [required]</li> <li><code>--json</code>: Display output in JSON format.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-sections-show","title":"<code>py-moodle sections show</code>","text":"<p>Shows detailed information of a specific section, including its modules.</p> <p>Usage:</p> <pre><code>$ py-moodle sections show [OPTIONS] SECTION_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>SECTION_ID</code>: ID of the section to show.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--course-id INTEGER</code>: ID of the course the section belongs to.  [required]</li> <li><code>--json</code>: Output in JSON format.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-sections-create","title":"<code>py-moodle sections create</code>","text":"<p>Creates a new section at the end of a course.</p> <p>Usage:</p> <pre><code>$ py-moodle sections create [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--course-id INTEGER</code>: ID of the course where to create the section.  [required]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-sections-delete","title":"<code>py-moodle sections delete</code>","text":"<p>Deletes a specific section by its ID.</p> <p>Usage:</p> <pre><code>$ py-moodle sections delete [OPTIONS] SECTION_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>SECTION_ID</code>: ID of the section to delete.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--course-id INTEGER</code>: ID of the course the section belongs to.  [required]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-modules","title":"<code>py-moodle modules</code>","text":"<p>Manage course modules (resources/activities) like labels, SCORMs, etc.</p> <p>Usage:</p> <pre><code>$ py-moodle modules [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>delete</code>: Deletes any module (label, SCORM, folder,...</li> <li><code>show</code>: Shows detailed information for a specific...</li> <li><code>list-types</code>: Lists all available module types...</li> <li><code>add</code>: Add a new module to a course.</li> <li><code>edit</code>: Edit existing course modules (labels,...</li> </ul>"},{"location":"cli/#py-moodle-modules-delete","title":"<code>py-moodle modules delete</code>","text":"<p>Deletes any module (label, SCORM, folder, etc.) by its ID. This uses the centralized delete function from the library.</p> <p>Usage:</p> <pre><code>$ py-moodle modules delete [OPTIONS] CMID\n</code></pre> <p>Arguments:</p> <ul> <li><code>CMID</code>: ID of the module (cmid) to delete.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-modules-show","title":"<code>py-moodle modules show</code>","text":"<p>Shows detailed information for a specific module.</p> <p>Usage:</p> <pre><code>$ py-moodle modules show [OPTIONS] CMID\n</code></pre> <p>Arguments:</p> <ul> <li><code>CMID</code>: ID of the module (cmid) to show.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--json</code>: Output in JSON format.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-modules-list-types","title":"<code>py-moodle modules list-types</code>","text":"<p>Lists all available module types (activities/resources) that can be added to a course.</p> <p>Usage:</p> <pre><code>$ py-moodle modules list-types [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--course-id INTEGER</code>: Course ID to check available modules for. Defaults to 1.  [default: 1]</li> <li><code>--json</code>: Output in JSON format.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-modules-add","title":"<code>py-moodle modules add</code>","text":"<p>Add a new module to a course.</p> <p>Usage:</p> <pre><code>$ py-moodle modules add [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>label</code>: Adds a new label to a course section.</li> <li><code>scorm</code>: Adds a new SCORM package to a course section.</li> <li><code>assign</code>: Adds a new assignment to a course section.</li> </ul>"},{"location":"cli/#py-moodle-modules-add-label","title":"<code>py-moodle modules add label</code>","text":"<p>Adds a new label to a course section.</p> <p>Usage:</p> <pre><code>$ py-moodle modules add label [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--course-id INTEGER</code>: ID of the course to add the label to.  [required]</li> <li><code>--section-id INTEGER</code>: ID of the section to add the label to.  [required]</li> <li><code>--html TEXT</code>: HTML content of the label.  [required]</li> <li><code>--name TEXT</code>: Internal name for the label.  [default: Label (from CLI)]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-modules-add-scorm","title":"<code>py-moodle modules add scorm</code>","text":"<p>Adds a new SCORM package to a course section.</p> <p>Usage:</p> <pre><code>$ py-moodle modules add scorm [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--course-id INTEGER</code>: ID of the course to add the SCORM to.  [required]</li> <li><code>--section-id INTEGER</code>: ID of the section to add the SCORM to.  [required]</li> <li><code>--name TEXT</code>: Name of the SCORM package.  [required]</li> <li><code>--file FILENAME</code>: Path to the SCORM package .zip file.  [required]</li> <li><code>--intro TEXT</code>: Introduction or description for the SCORM.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-modules-add-assign","title":"<code>py-moodle modules add assign</code>","text":"<p>Adds a new assignment to a course section.</p> <p>Usage:</p> <pre><code>$ py-moodle modules add assign [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--course-id INTEGER</code>: ID of the course to add the assignment to.  [required]</li> <li><code>--section-id INTEGER</code>: ID of the section to add the assignment to.  [required]</li> <li><code>--name TEXT</code>: Name of the new assignment.  [required]</li> <li><code>--intro TEXT</code>: Introduction or description for the assignment (HTML supported).</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-modules-edit","title":"<code>py-moodle modules edit</code>","text":"<p>Edit existing course modules (labels, SCORMs, etc.)</p> <p>Usage:</p> <pre><code>$ py-moodle modules edit [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>label</code>: Edits an existing label module.</li> <li><code>name</code>: Edits the name of any module (label,...</li> </ul>"},{"location":"cli/#py-moodle-modules-edit-label","title":"<code>py-moodle modules edit label</code>","text":"<p>Edits an existing label module.</p> <p>Usage:</p> <pre><code>$ py-moodle modules edit label [OPTIONS] CMID\n</code></pre> <p>Arguments:</p> <ul> <li><code>CMID</code>: ID of the label module to edit.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--html TEXT</code>: New HTML content for the label.</li> <li><code>--name TEXT</code>: New internal name for the label.</li> <li><code>--visible INTEGER</code>: Set visibility (1 for visible, 0 for hidden).</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-modules-edit-name","title":"<code>py-moodle modules edit name</code>","text":"<p>Edits the name of any module (label, assign, SCORM, etc.).</p> <p>Usage:</p> <pre><code>$ py-moodle modules edit name [OPTIONS] CMID\n</code></pre> <p>Arguments:</p> <ul> <li><code>CMID</code>: ID of the module (cmid) to rename.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-n, --name TEXT</code>: The new name for the module.  [required]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-users","title":"<code>py-moodle users</code>","text":"<p>Manage Moodle users: list, create, delete.</p> <p>Usage:</p> <pre><code>$ py-moodle users [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>list</code>: Lists users enrolled in a specific course.</li> <li><code>create</code>: Creates a new user in Moodle.</li> <li><code>delete</code>: Deletes a user from Moodle by their ID.</li> </ul>"},{"location":"cli/#py-moodle-users-list","title":"<code>py-moodle users list</code>","text":"<p>Lists users enrolled in a specific course.</p> <p>Usage:</p> <pre><code>$ py-moodle users list [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--course-id INTEGER</code>: ID of the course to list users from.  [required]</li> <li><code>--json</code>: Display output in JSON format.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-users-create","title":"<code>py-moodle users create</code>","text":"<p>Creates a new user in Moodle.</p> <p>Usage:</p> <pre><code>$ py-moodle users create [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--username TEXT</code>: Username (must be unique).  [required]</li> <li><code>--password TEXT</code>: Password (must meet site policy).  [required]</li> <li><code>--firstname TEXT</code>: First name.  [required]</li> <li><code>--lastname TEXT</code>: Last name.  [required]</li> <li><code>--email TEXT</code>: Email address (must be unique).  [required]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-users-delete","title":"<code>py-moodle users delete</code>","text":"<p>Deletes a user from Moodle by their ID.</p> <p>Usage:</p> <pre><code>$ py-moodle users delete [OPTIONS] USER_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>USER_ID</code>: ID of the user to delete.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--force</code>: Delete without asking for confirmation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-admin","title":"<code>py-moodle admin</code>","text":"<p>Moodle site administration tasks.</p> <p>Usage:</p> <pre><code>$ py-moodle admin [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>enable-webservice</code>: Activates a web service in Moodle.</li> </ul>"},{"location":"cli/#py-moodle-admin-enable-webservice","title":"<code>py-moodle admin enable-webservice</code>","text":"<p>Activates a web service in Moodle. Requires administrator permissions.</p> <p>Usage:</p> <pre><code>$ py-moodle admin enable-webservice [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--service-id INTEGER</code>: Web service ID to activate (default: 1 for 'Moodle mobile app').  [default: 1]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-folders","title":"<code>py-moodle folders</code>","text":"<p>Manage folder modules: create, delete, and manage their content.</p> <p>Usage:</p> <pre><code>$ py-moodle folders [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>add</code>: Adds a new folder to a course section,...</li> <li><code>delete</code>: Deletes a folder module from a course.</li> <li><code>list-content</code>: Lists the files and subdirectories inside...</li> <li><code>add-file</code>: Adds a file to an existing folder.</li> <li><code>delete-file</code>: Deletes a file from an existing folder.</li> <li><code>rename-file</code>: Renames a file inside an existing folder.</li> </ul>"},{"location":"cli/#py-moodle-folders-add","title":"<code>py-moodle folders add</code>","text":"<p>Adds a new folder to a course section, optionally with initial files.</p> <p>Usage:</p> <pre><code>$ py-moodle folders add [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--course-id INTEGER</code>: ID of the course to add the folder to.  [required]</li> <li><code>--section-id INTEGER</code>: ID of the section to add the folder to.  [required]</li> <li><code>--name TEXT</code>: Name of the new folder.  [required]</li> <li><code>--intro TEXT</code>: Introduction or description for the folder (HTML supported).</li> <li><code>--file FILENAME</code>: Path to a file to include. Can be used multiple times.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-folders-delete","title":"<code>py-moodle folders delete</code>","text":"<p>Deletes a folder module from a course.</p> <p>Usage:</p> <pre><code>$ py-moodle folders delete [OPTIONS] CMID\n</code></pre> <p>Arguments:</p> <ul> <li><code>CMID</code>: ID of the folder module (cmid) to delete.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --force</code>: Delete without confirmation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-folders-list-content","title":"<code>py-moodle folders list-content</code>","text":"<p>Lists the files and subdirectories inside a folder.</p> <p>Usage:</p> <pre><code>$ py-moodle folders list-content [OPTIONS] CMID\n</code></pre> <p>Arguments:</p> <ul> <li><code>CMID</code>: ID of the folder module (cmid) to inspect.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-folders-add-file","title":"<code>py-moodle folders add-file</code>","text":"<p>Adds a file to an existing folder.</p> <p>Usage:</p> <pre><code>$ py-moodle folders add-file [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--cmid INTEGER</code>: ID of the folder to add the file to.  [required]</li> <li><code>--file FILENAME</code>: Path of the local file to upload.  [required]</li> <li><code>--subfolder TEXT</code>: Path to the subfolder inside the Moodle folder (e.g., '/scorms/'). Must start and end with '/'.  [default: /]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-folders-delete-file","title":"<code>py-moodle folders delete-file</code>","text":"<p>Deletes a file from an existing folder.</p> <p>Usage:</p> <pre><code>$ py-moodle folders delete-file [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--cmid INTEGER</code>: ID of the folder containing the file.  [required]</li> <li><code>--filename TEXT</code>: Name of the file to delete from the folder.  [required]</li> <li><code>-f, --force</code>: Delete without confirmation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-folders-rename-file","title":"<code>py-moodle folders rename-file</code>","text":"<p>Renames a file inside an existing folder.</p> <p>Usage:</p> <pre><code>$ py-moodle folders rename-file [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--cmid INTEGER</code>: ID of the folder containing the file.  [required]</li> <li><code>--old-name TEXT</code>: The current name of the file.  [required]</li> <li><code>--new-name TEXT</code>: The new name for the file.  [required]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-pages","title":"<code>py-moodle pages</code>","text":"<p>Manage page modules: create and delete HTML pages.</p> <p>Usage:</p> <pre><code>$ py-moodle pages [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>add</code>: Add a new page module with HTML content to...</li> <li><code>delete</code>: Delete a page module from a course.</li> </ul>"},{"location":"cli/#py-moodle-pages-add","title":"<code>py-moodle pages add</code>","text":"<p>Add a new page module with HTML content to a course section.</p> <p>Usage:</p> <pre><code>$ py-moodle pages add [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--course-id INTEGER</code>: ID of the course to add the page to.  [required]</li> <li><code>--section-id INTEGER</code>: ID of the section to add the page to.  [required]</li> <li><code>--name TEXT</code>: Name/title of the page.  [required]</li> <li><code>--file FILENAME</code>: Path to a file containing the HTML content.  [required]</li> <li><code>--intro TEXT</code>: Introduction or description for the page.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-pages-delete","title":"<code>py-moodle pages delete</code>","text":"<p>Delete a page module from a course.</p> <p>Usage:</p> <pre><code>$ py-moodle pages delete [OPTIONS] CMID\n</code></pre> <p>Arguments:</p> <ul> <li><code>CMID</code>: ID of the page module (cmid) to delete.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --force</code>: Delete without confirmation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-resources","title":"<code>py-moodle resources</code>","text":"<p>Manage resource modules: create and delete single-file resources.</p> <p>Usage:</p> <pre><code>$ py-moodle resources [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>add</code>: Add a new resource (single file) to a...</li> <li><code>delete</code>: Delete a resource module from a course.</li> </ul>"},{"location":"cli/#py-moodle-resources-add","title":"<code>py-moodle resources add</code>","text":"<p>Add a new resource (single file) to a course section.</p> <p>Usage:</p> <pre><code>$ py-moodle resources add [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--course-id INTEGER</code>: ID of the course to add the resource to.  [required]</li> <li><code>--section-id INTEGER</code>: ID of the section to add the resource to.  [required]</li> <li><code>--name TEXT</code>: Name/title of the resource.  [required]</li> <li><code>--file FILENAME</code>: Path to the file to upload.  [required]</li> <li><code>--intro TEXT</code>: Introduction or description for the resource.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-resources-delete","title":"<code>py-moodle resources delete</code>","text":"<p>Delete a resource module from a course.</p> <p>Usage:</p> <pre><code>$ py-moodle resources delete [OPTIONS] CMID\n</code></pre> <p>Arguments:</p> <ul> <li><code>CMID</code>: ID of the resource module (cmid) to delete.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --force</code>: Delete without confirmation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-urls","title":"<code>py-moodle urls</code>","text":"<p>Manage URL modules: create and delete external links.</p> <p>Usage:</p> <pre><code>$ py-moodle urls [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>add</code>: Add a new URL module to a course section.</li> <li><code>delete</code>: Delete a URL module from a course.</li> </ul>"},{"location":"cli/#py-moodle-urls-add","title":"<code>py-moodle urls add</code>","text":"<p>Add a new URL module to a course section.</p> <p>Usage:</p> <pre><code>$ py-moodle urls add [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--course-id INTEGER</code>: ID of the course to add the URL to.  [required]</li> <li><code>--section-id INTEGER</code>: ID of the section to add the URL to.  [required]</li> <li><code>--name TEXT</code>: Name/title of the URL.  [required]</li> <li><code>--url TEXT</code>: The external URL to link.  [required]</li> <li><code>--intro TEXT</code>: Introduction or description.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-urls-delete","title":"<code>py-moodle urls delete</code>","text":"<p>Delete a URL module from a course.</p> <p>Usage:</p> <pre><code>$ py-moodle urls delete [OPTIONS] CMID\n</code></pre> <p>Arguments:</p> <ul> <li><code>CMID</code>: ID of the URL module (cmid) to delete.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --force</code>: Delete without confirmation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#py-moodle-site","title":"<code>py-moodle site</code>","text":"<p>Get site information.</p> <p>Usage:</p> <pre><code>$ py-moodle site [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>info</code>: Get site info.</li> </ul>"},{"location":"cli/#py-moodle-site-info","title":"<code>py-moodle site info</code>","text":"<p>Get site info.</p> <p>Usage:</p> <pre><code>$ py-moodle site info [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--json</code>: Output as JSON.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"development/","title":"Development","text":"<p>Welcome to py-moodle development! This guide covers everything you need to contribute to the project.</p>"},{"location":"development/#development-setup","title":"Development Setup","text":""},{"location":"development/#1-clone-and-setup","title":"1. Clone and Setup","text":"<pre><code>git clone https://github.com/erseco/python-moodle.git\ncd py-moodle\n\n# Create virtual environment\npython -m venv env\nsource env/bin/activate  # On Windows: env\\Scripts\\activate\n\n# Install in development mode\npip install -e .\n</code></pre>"},{"location":"development/#2-development-dependencies","title":"2. Development Dependencies","text":"<pre><code># Core development tools\npip install black isort flake8 pytest\n\n# Documentation tools\npip install mkdocs mkdocs-material mkdocstrings[python]\n</code></pre>"},{"location":"development/#code-style-and-standards","title":"Code Style and Standards","text":""},{"location":"development/#formatting","title":"Formatting","text":"<p>The project uses <code>black</code> for code formatting and <code>isort</code> for import sorting:</p> <pre><code># Format code\nmake format\n\n# Or manually:\nblack src/ tests/\nisort src/ tests/\n</code></pre>"},{"location":"development/#linting","title":"Linting","text":"<pre><code># Run linter\nmake lint\n\n# Or manually:\nflake8 src/ tests/\n</code></pre>"},{"location":"development/#code-standards","title":"Code Standards","text":"<ul> <li>Language: All code, comments, and documentation must be in English</li> <li>Docstrings: Use Google style (enforced by <code>flake8-docstrings</code>)</li> <li>Type hints: Encouraged for new code</li> <li>Line length: 88 characters (Black default)</li> </ul> <p>Example function with proper docstring:</p> <pre><code>def create_course(session: requests.Session, url: str, course_data: dict, token: str = None) -&gt; dict:\n    \"\"\"Create a new course in Moodle.\n\n    Args:\n        session: Authenticated requests session\n        url: Base Moodle URL\n        course_data: Dictionary containing course information\n        token: Optional session token\n\n    Returns:\n        Dictionary containing the created course information\n\n    Raises:\n        requests.RequestException: If the request fails\n        ValueError: If course_data is invalid\n\n    Example:\n        &gt;&gt;&gt; course_data = {\n        ...     'fullname': 'My Course',\n        ...     'shortname': 'my-course',\n        ...     'categoryid': 1\n        ... }\n        &gt;&gt;&gt; course = create_course(session, url, course_data)\n        &gt;&gt;&gt; print(course['id'])\n        42\n    \"\"\"\n    # Implementation here\n    pass\n</code></pre>"},{"location":"development/#testing","title":"Testing","text":""},{"location":"development/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\nmake test\n\n# Run specific test file\npytest tests/test_course.py\n\n# Run with coverage\npytest --cov=src/py_moodle tests/\n\n# Run against different environments\nmake test-local    # Local Moodle instance\nmake test-staging  # Staging environment\n</code></pre>"},{"location":"development/#writing-tests","title":"Writing Tests","text":"<ul> <li>Tests go in the <code>tests/</code> directory</li> <li>Use descriptive test names: <code>test_create_course_with_valid_data</code></li> <li>Test both success and failure cases</li> <li>Use fixtures from <code>conftest.py</code></li> </ul> <p>Example test:</p> <pre><code>def test_create_course_success(moodle_session):\n    \"\"\"Test successful course creation.\"\"\"\n    course_data = {\n        'fullname': 'Test Course',\n        'shortname': 'test-001',\n        'categoryid': 1\n    }\n\n    course = create_course(\n        moodle_session.session,\n        moodle_session.settings.url,\n        course_data,\n        token=moodle_session.token\n    )\n\n    assert course['fullname'] == 'Test Course'\n    assert course['shortname'] == 'test-001'\n    assert 'id' in course\n</code></pre>"},{"location":"development/#project-structure","title":"Project Structure","text":"<pre><code>python-moodle/\n\u251c\u2500\u2500 src/py_moodle/          # Main package\n\u2502   \u251c\u2500\u2500 __init__.py         # Package initialization\n\u2502   \u251c\u2500\u2500 cli/                # CLI commands\n\u2502   \u2502   \u251c\u2500\u2500 app.py          # Main CLI app\n\u2502   \u2502   \u251c\u2500\u2500 courses.py      # Course commands\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 course.py           # Course management\n\u2502   \u251c\u2500\u2500 session.py          # Session handling\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 tests/                  # Test suite\n\u251c\u2500\u2500 docs/                   # Documentation\n\u251c\u2500\u2500 Makefile               # Development commands\n\u2514\u2500\u2500 pyproject.toml         # Project configuration\n</code></pre>"},{"location":"development/#cli-architecture","title":"CLI Architecture","text":"<p>The CLI follows a layered architecture:</p> <ol> <li>CLI Layer (<code>src/py_moodle/cli/</code>): Thin command-line interface</li> <li>Core Library (<code>src/py_moodle/</code>): Core functionality</li> <li>Session Management (<code>session.py</code>): Authentication and requests</li> </ol>"},{"location":"development/#adding-new-cli-commands","title":"Adding New CLI Commands","text":"<ol> <li>Add core function to appropriate module (e.g., <code>course.py</code>)</li> <li>Add CLI command to appropriate CLI module (e.g., <code>cli/courses.py</code>)</li> <li>Add tests for both core function and CLI command</li> <li>Update documentation</li> </ol> <p>Example:</p> <pre><code># In src/py_moodle/course.py\ndef duplicate_course(session, url, course_id, new_name, token=None):\n    \"\"\"Duplicate an existing course.\"\"\"\n    # Implementation\n    pass\n\n# In src/py_moodle/cli/courses.py\n@courses_app.command(\"duplicate\")\ndef duplicate_course_cmd(\n    course_id: int = typer.Argument(..., help=\"Course ID to duplicate\"),\n    new_name: str = typer.Option(..., \"--name\", help=\"Name for duplicated course\")\n):\n    \"\"\"Duplicate a course.\"\"\"\n    ms = MoodleSession.get()\n    result = duplicate_course(ms.session, ms.settings.url, course_id, new_name, token=ms.token)\n    typer.echo(f\"Duplicated course: {result['id']}\")\n</code></pre>"},{"location":"development/#documentation","title":"Documentation","text":""},{"location":"development/#building-documentation","title":"Building Documentation","text":"<pre><code># Build documentation\nmake docs\n\n# Serve documentation locally\nmkdocs serve\n\n# Deploy to GitHub Pages\nmkdocs gh-deploy\n</code></pre>"},{"location":"development/#adding-api-documentation","title":"Adding API Documentation","text":"<p>API documentation is auto-generated from docstrings. To add a new module:</p> <ol> <li>Add module to <code>docs/api/</code> directory</li> <li>Create markdown file with mkdocstrings reference:</li> </ol> <pre><code># Module Name\n\n::: py_moodle.module_name\n</code></pre> <ol> <li>Update navigation in <code>mkdocs.yml</code></li> </ol>"},{"location":"development/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"development/#before-submitting","title":"Before Submitting","text":"<ol> <li>Run tests: <code>make test</code></li> <li>Format code: <code>make format</code></li> <li>Check linting: <code>make lint</code></li> <li>Update docs: If adding features</li> <li>Add tests: For new functionality</li> </ol>"},{"location":"development/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository</li> <li>Create feature branch: <code>git checkout -b feature-name</code></li> <li>Make changes following code standards</li> <li>Add tests for new functionality</li> <li>Update documentation if needed</li> <li>Submit pull request with clear description</li> </ol>"},{"location":"development/#commit-messages","title":"Commit Messages","text":"<p>Use conventional commit format:</p> <pre><code>feat: add course duplication functionality\nfix: handle authentication timeout properly\ndocs: update installation instructions\ntest: add tests for user management\n</code></pre>"},{"location":"development/#release-process","title":"Release Process","text":"<p>Releases are handled by maintainers:</p> <ol> <li>Update version in <code>pyproject.toml</code></li> <li>Update CHANGELOG.md</li> <li>Create release tag</li> <li>GitHub Actions handles PyPI publishing</li> </ol>"},{"location":"development/#getting-help","title":"Getting Help","text":"<ul> <li>Issues: Report bugs or request features on GitHub</li> <li>Discussions: Use GitHub Discussions for questions</li> <li>Email: Contact maintainers at info@ernesto.es</li> </ul>"},{"location":"development/#development-tools","title":"Development Tools","text":""},{"location":"development/#makefile-commands","title":"Makefile Commands","text":"<pre><code>make format    # Format code with black and isort\nmake lint      # Run flake8 linter\nmake test      # Run pytest\nmake docs      # Build documentation\nmake clean     # Clean build artifacts\n</code></pre>"},{"location":"development/#environment-variables","title":"Environment Variables","text":"<p>For development, you might need additional environment variables:</p> <pre><code># In .env.development\nMOODLE_LOCAL_URL=http://localhost:8080\nMOODLE_LOCAL_USERNAME=admin\nMOODLE_LOCAL_PASSWORD=admin\nDEBUG=true\n</code></pre>"},{"location":"development/#docker-development","title":"Docker Development","text":"<p>Use the provided Docker setup for consistent development:</p> <pre><code># Start Moodle development instance\ndocker-compose up -d\n\n# Run tests against Docker instance\nMOODLE_LOCAL_URL=http://localhost:8080 make test-local\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>This page contains practical examples of using py-moodle for common tasks.</p>"},{"location":"examples/#course-management-examples","title":"Course Management Examples","text":""},{"location":"examples/#create-multiple-courses","title":"Create Multiple Courses","text":"<pre><code># Create courses from a list\nfor course in \"Math 101\" \"Physics 201\" \"Chemistry 301\"; do\n    py-moodle courses create --fullname \"$course\" --shortname \"$(echo $course | tr ' ' '-' | tr '[:upper:]' '[:lower:]')\"\ndone\n</code></pre>"},{"location":"examples/#bulk-content-creation","title":"Bulk Content Creation","text":"<pre><code># Add welcome labels to all sections of a course\ncourse_id=2\nfor section in {1..5}; do\n    py-moodle modules add label \\\n        --course-id $course_id \\\n        --section-id $section \\\n        --name \"Section $section Welcome\" \\\n        --intro \"&lt;h2&gt;Welcome to Section $section&lt;/h2&gt;&lt;p&gt;This section covers important topics.&lt;/p&gt;\"\ndone\n</code></pre>"},{"location":"examples/#file-management-examples","title":"File Management Examples","text":""},{"location":"examples/#upload-multiple-files","title":"Upload Multiple Files","text":"<pre><code># Upload all PDFs in a directory to a course folder\ncourse_id=2\nsection_id=1\nfolder_name=\"Course Materials\"\n\n# Create the folder first\npy-moodle modules add folder --course-id $course_id --section-id $section_id --name \"$folder_name\"\n\n# Upload files (you'll need to get the folder ID from the output above)\nfor file in *.pdf; do\n    py-moodle files upload --course-id $course_id --file \"$file\"\ndone\n</code></pre>"},{"location":"examples/#scorm-package-upload","title":"SCORM Package Upload","text":"<pre><code># Upload and configure a SCORM package\npy-moodle modules add scorm \\\n    --course-id 2 \\\n    --section-id 1 \\\n    --name \"Interactive Lesson 1\" \\\n    --path \"./scorm-packages/lesson1.zip\" \\\n    --intro \"Complete this interactive lesson before the next class.\"\n</code></pre>"},{"location":"examples/#python-library-examples","title":"Python Library Examples","text":""},{"location":"examples/#automated-course-setup","title":"Automated Course Setup","text":"<pre><code>from py_moodle import MoodleSession\nfrom py_moodle.course import create_course, list_courses\nfrom py_moodle.module import add_label, add_folder\n\n# Initialize session\nms = MoodleSession.get()\n\n# Create a new course\ncourse_data = {\n    'fullname': 'Automated Course Setup Demo',\n    'shortname': 'auto-demo-001',\n    'categoryid': 1\n}\n\ncourse = create_course(ms.session, ms.settings.url, course_data, token=ms.token)\nprint(f\"Created course: {course['id']}\")\n\n# Add welcome content\nadd_label(\n    ms.session,\n    ms.settings.url,\n    course_id=course['id'],\n    section_id=1,\n    name=\"Course Welcome\",\n    intro=\"&lt;h1&gt;Welcome!&lt;/h1&gt;&lt;p&gt;This course was created automatically.&lt;/p&gt;\",\n    token=ms.token\n)\n\n# Add a materials folder\nadd_folder(\n    ms.session,\n    ms.settings.url,\n    course_id=course['id'],\n    section_id=1,\n    name=\"Course Materials\",\n    intro=\"All course materials will be stored here.\",\n    token=ms.token\n)\n\nprint(\"Course setup completed!\")\n</code></pre>"},{"location":"examples/#batch-user-enrollment","title":"Batch User Enrollment","text":"<pre><code>from py_moodle import MoodleSession\nfrom py_moodle.user import list_users\nfrom py_moodle.course import enroll_user\n\nms = MoodleSession.get()\n\n# List of users to enroll\nuser_emails = ['student1@example.com', 'student2@example.com', 'student3@example.com']\ncourse_id = 2\n\n# Get all users\nusers = list_users(ms.session, ms.settings.url, token=ms.token)\n\n# Create email to user ID mapping\nemail_to_id = {user['email']: user['id'] for user in users}\n\n# Enroll users\nfor email in user_emails:\n    if email in email_to_id:\n        user_id = email_to_id[email]\n        enroll_user(ms.session, ms.settings.url, course_id, user_id, token=ms.token)\n        print(f\"Enrolled {email} in course {course_id}\")\n    else:\n        print(f\"User {email} not found\")\n</code></pre>"},{"location":"examples/#advanced-automation","title":"Advanced Automation","text":""},{"location":"examples/#complete-course-deployment","title":"Complete Course Deployment","text":"<pre><code>import json\nfrom py_moodle import MoodleSession\nfrom py_moodle.course import create_course\nfrom py_moodle.module import add_label, add_resource, add_scorm\n\n# Load course configuration from JSON\nwith open('course_config.json', 'r') as f:\n    config = json.load(f)\n\nms = MoodleSession.get()\n\n# Create the course\ncourse = create_course(ms.session, ms.settings.url, config['course'], token=ms.token)\nprint(f\"Created course: {course['shortname']}\")\n\n# Add content according to configuration\nfor section_config in config['sections']:\n    section_id = section_config['id']\n\n    # Add section content\n    for content in section_config['content']:\n        if content['type'] == 'label':\n            add_label(\n                ms.session, ms.settings.url,\n                course_id=course['id'],\n                section_id=section_id,\n                name=content['name'],\n                intro=content['intro'],\n                token=ms.token\n            )\n        elif content['type'] == 'scorm':\n            add_scorm(\n                ms.session, ms.settings.url,\n                course_id=course['id'],\n                section_id=section_id,\n                name=content['name'],\n                scorm_file=content['file'],\n                token=ms.token\n            )\n\nprint(\"Course deployment completed!\")\n</code></pre> <p>Example <code>course_config.json</code>:</p> <pre><code>{\n  \"course\": {\n    \"fullname\": \"Introduction to Python Programming\",\n    \"shortname\": \"python-intro-2024\",\n    \"categoryid\": 1\n  },\n  \"sections\": [\n    {\n      \"id\": 1,\n      \"content\": [\n        {\n          \"type\": \"label\",\n          \"name\": \"Course Introduction\",\n          \"intro\": \"&lt;h2&gt;Welcome to Python Programming!&lt;/h2&gt;&lt;p&gt;This course will teach you the basics of Python.&lt;/p&gt;\"\n        },\n        {\n          \"type\": \"scorm\",\n          \"name\": \"Python Basics Interactive\",\n          \"file\": \"./scorm/python-basics.zip\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"examples/#troubleshooting-examples","title":"Troubleshooting Examples","text":""},{"location":"examples/#debug-session-issues","title":"Debug Session Issues","text":"<pre><code>from py_moodle import MoodleSession\n\n# Enable debug mode\nms = MoodleSession.get()\nprint(f\"Session URL: {ms.settings.url}\")\nprint(f\"Session token: {ms.token[:10]}...\" if ms.token else \"No token\")\n\n# Test session validity\ntry:\n    from py_moodle.course import list_courses\n    courses = list_courses(ms.session, ms.settings.url, token=ms.token)\n    print(f\"Session valid - found {len(courses)} courses\")\nexcept Exception as e:\n    print(f\"Session error: {e}\")\n</code></pre>"},{"location":"examples/#error-handling","title":"Error Handling","text":"<pre><code>from py_moodle import MoodleSession\nfrom py_moodle.course import create_course\n\nms = MoodleSession.get()\n\ntry:\n    course_data = {\n        'fullname': 'Test Course',\n        'shortname': 'test-duplicate',  # This might already exist\n        'categoryid': 1\n    }\n\n    course = create_course(ms.session, ms.settings.url, course_data, token=ms.token)\n    print(f\"Success: Created course {course['id']}\")\n\nexcept Exception as e:\n    print(f\"Error creating course: {e}\")\n    # Handle specific error cases\n    if \"shortname\" in str(e).lower():\n        print(\"Try using a unique shortname\")\n    elif \"permission\" in str(e).lower():\n        print(\"Check your user permissions\")\n</code></pre>"},{"location":"api/assign/","title":"Assign","text":""},{"location":"api/assign/#py_moodle.assign","title":"py_moodle.assign","text":"<p>Assignment management module for <code>py-moodle</code>.</p> <p>Classes:</p> Name Description <code>MoodleAssignError</code> <p>Exception raised for errors in assign operations.</p> <p>Functions:</p> Name Description <code>add_assign</code> <p>Creates a new assign with sensible defaults, similar to add_label.</p>"},{"location":"api/assign/#py_moodle.assign-attributes","title":"Attributes","text":""},{"location":"api/assign/#py_moodle.assign.MODULE_NAME","title":"MODULE_NAME  <code>module-attribute</code>","text":"<pre><code>MODULE_NAME = 'assign'\n</code></pre>"},{"location":"api/assign/#py_moodle.assign-classes","title":"Classes","text":""},{"location":"api/assign/#py_moodle.assign.MoodleAssignError","title":"MoodleAssignError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in assign operations.</p>"},{"location":"api/assign/#py_moodle.assign-functions","title":"Functions","text":""},{"location":"api/assign/#py_moodle.assign.add_assign","title":"add_assign","text":"<pre><code>add_assign(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    course_id: int,\n    section_id: int,\n    name: str,\n    intro: str = \"\",\n    **kwargs: Any\n) -&gt; int\n</code></pre> <p>Creates a new assign with sensible defaults, similar to add_label.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests.Session object.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for form submissions.</p> required <code>course_id</code> <code>int</code> <p>The ID of the course to add the assign to.</p> required <code>section_id</code> <code>int</code> <p>The ID of the section to add the assign to.</p> required <code>name</code> <code>str</code> <p>The name of the assignment.</p> required <code>intro</code> <code>str</code> <p>The introduction/description displayed on the course page.</p> <code>''</code> <code>**kwargs</code> <code>Any</code> <p>Optional overrides for advanced assign settings.       Examples: max_grade=50, due_date=datetime(...), etc.</p> <code>{}</code> <p>Returns:</p> Type Description <code>int</code> <p>The new course module ID (cmid) of the created assign.</p>"},{"location":"api/auth/","title":"Auth","text":""},{"location":"api/auth/#py_moodle.auth","title":"py_moodle.auth","text":"<p>Authentication module for Moodle.</p> <p>Handles session-based login (including support for CAS) and retrieves the session key required for further AJAX requests.</p> <p>Classes:</p> Name Description <code>LoginError</code> <p>Exception raised when authentication fails.</p> <code>MoodleAuth</code> <p>Authenticate a user against a Moodle site.</p> <p>Functions:</p> Name Description <code>enable_webservice</code> <p>Enables a webservice if it exists but is disabled (USE WITH CAUTION).</p> <code>login</code> <p>Authenticate a user and return an active session.</p>"},{"location":"api/auth/#py_moodle.auth-classes","title":"Classes","text":""},{"location":"api/auth/#py_moodle.auth.LoginError","title":"LoginError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when authentication fails.</p>"},{"location":"api/auth/#py_moodle.auth.MoodleAuth","title":"MoodleAuth","text":"<pre><code>MoodleAuth(\n    base_url: str,\n    username: str,\n    password: str,\n    use_cas: bool = False,\n    cas_url: Optional[str] = None,\n    pre_configured_token: Optional[str] = None,\n    debug: bool = False,\n)\n</code></pre> <p>Authenticate a user against a Moodle site.</p> <p>Initialize the authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>username</code> <code>str</code> <p>Username to authenticate with.</p> required <code>password</code> <code>str</code> <p>Password for the user.</p> required <code>use_cas</code> <code>bool</code> <p>Whether to use CAS authentication.</p> <code>False</code> <code>cas_url</code> <code>Optional[str]</code> <p>URL of the CAS server (if <code>use_cas</code> is <code>True</code>).</p> <code>None</code> <code>pre_configured_token</code> <code>Optional[str]</code> <p>Pre-created webservice token, if available.</p> <code>None</code> <code>debug</code> <code>bool</code> <p>Enable verbose debugging output.</p> <code>False</code> <p>Methods:</p> Name Description <code>login</code> <p>Authenticate the user and return a Moodle session.</p> <p>Attributes:</p> Name Type Description <code>base_url</code> <code>username</code> <code>password</code> <code>session</code> <code>sesskey</code> <code>use_cas</code> <code>cas_url</code> <code>pre_configured_token</code> <code>debug</code> <code>webservice_token</code>"},{"location":"api/auth/#py_moodle.auth.MoodleAuth-attributes","title":"Attributes","text":""},{"location":"api/auth/#py_moodle.auth.MoodleAuth.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url = rstrip('/')\n</code></pre>"},{"location":"api/auth/#py_moodle.auth.MoodleAuth.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username = username\n</code></pre>"},{"location":"api/auth/#py_moodle.auth.MoodleAuth.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password = password\n</code></pre>"},{"location":"api/auth/#py_moodle.auth.MoodleAuth.session","title":"session  <code>instance-attribute</code>","text":"<pre><code>session = Session()\n</code></pre>"},{"location":"api/auth/#py_moodle.auth.MoodleAuth.sesskey","title":"sesskey  <code>instance-attribute</code>","text":"<pre><code>sesskey = None\n</code></pre>"},{"location":"api/auth/#py_moodle.auth.MoodleAuth.use_cas","title":"use_cas  <code>instance-attribute</code>","text":"<pre><code>use_cas = use_cas\n</code></pre>"},{"location":"api/auth/#py_moodle.auth.MoodleAuth.cas_url","title":"cas_url  <code>instance-attribute</code>","text":"<pre><code>cas_url = cas_url\n</code></pre>"},{"location":"api/auth/#py_moodle.auth.MoodleAuth.pre_configured_token","title":"pre_configured_token  <code>instance-attribute</code>","text":"<pre><code>pre_configured_token = pre_configured_token\n</code></pre>"},{"location":"api/auth/#py_moodle.auth.MoodleAuth.debug","title":"debug  <code>instance-attribute</code>","text":"<pre><code>debug = debug\n</code></pre>"},{"location":"api/auth/#py_moodle.auth.MoodleAuth.webservice_token","title":"webservice_token  <code>instance-attribute</code>","text":"<pre><code>webservice_token = None\n</code></pre>"},{"location":"api/auth/#py_moodle.auth.MoodleAuth-functions","title":"Functions","text":""},{"location":"api/auth/#py_moodle.auth.MoodleAuth.login","title":"login","text":"<pre><code>login() -&gt; Session\n</code></pre> <p>Authenticate the user and return a Moodle session.</p> <p>Returns:</p> Type Description <code>Session</code> <p>requests.Session: Authenticated session with cookies.</p> <p>Raises:</p> Type Description <code>LoginError</code> <p>If authentication fails.</p>"},{"location":"api/auth/#py_moodle.auth-functions","title":"Functions","text":""},{"location":"api/auth/#py_moodle.auth.enable_webservice","title":"enable_webservice","text":"<pre><code>enable_webservice(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    service_id: int = 1,\n    debug: bool = True,\n) -&gt; bool\n</code></pre> <p>Enables a webservice if it exists but is disabled (USE WITH CAUTION).</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>An authenticated requests.Session object.</p> required <code>base_url</code> <code>str</code> <p>The base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>The session key for form submissions.</p> required <code>service_id</code> <code>int</code> <p>The ID of the webservice to enable (default is 1 for 'Moodle mobile web service').</p> <code>1</code> <code>debug</code> <code>bool</code> <p>If True, print debug information.</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the operation seems successful.</p> <p>Raises:</p> Type Description <code>LoginError</code> <p>If the operation fails.</p>"},{"location":"api/auth/#py_moodle.auth.login","title":"login","text":"<pre><code>login(\n    url: str,\n    username: str,\n    password: str,\n    use_cas: bool = False,\n    cas_url: Optional[str] = None,\n    pre_configured_token: Optional[str] = None,\n    debug: bool = False,\n) -&gt; Session\n</code></pre> <p>Authenticate a user and return an active session.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>username</code> <code>str</code> <p>Username to authenticate.</p> required <code>password</code> <code>str</code> <p>Password for the user.</p> required <code>use_cas</code> <code>bool</code> <p>Whether to use CAS authentication.</p> <code>False</code> <code>cas_url</code> <code>Optional[str]</code> <p>URL of the CAS server.</p> <code>None</code> <code>pre_configured_token</code> <code>Optional[str]</code> <p>Optional pre-created webservice token.</p> <code>None</code> <code>debug</code> <code>bool</code> <p>Enable verbose debugging output.</p> <code>False</code> <p>Returns:</p> Type Description <code>Session</code> <p>An authenticated <code>requests.Session</code> instance.</p>"},{"location":"api/category/","title":"Category","text":""},{"location":"api/category/#py_moodle.category","title":"py_moodle.category","text":"<p>Category management module for Moodle CLI.</p> <p>Provides functions to list, create, and delete course categories using Moodle webservice API or AJAX/form posts for greater compatibility.</p> <p>All code and comments must be in English.</p> <p>Classes:</p> Name Description <code>MoodleCategoryError</code> <p>Exception raised for errors in category operations.</p> <p>Functions:</p> Name Description <code>list_categories</code> <p>List all course categories.</p> <code>get_category</code> <p>Retrieve a single category by ID using the webservice.</p> <code>create_category_form</code> <p>Create a new course category using the form endpoint.</p> <code>delete_category_form</code> <p>Delete a category by mimicking the browser flow.</p> <code>create_category</code> <p>Create a category using form post or webservice.</p> <code>delete_category</code> <p>Delete a category using form post or webservice.</p>"},{"location":"api/category/#py_moodle.category-classes","title":"Classes","text":""},{"location":"api/category/#py_moodle.category.MoodleCategoryError","title":"MoodleCategoryError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in category operations.</p>"},{"location":"api/category/#py_moodle.category-functions","title":"Functions","text":""},{"location":"api/category/#py_moodle.category.list_categories","title":"list_categories","text":"<pre><code>list_categories(\n    session: Session, base_url: str, token: str\n) -&gt; List[Dict[str, Any]]\n</code></pre> <p>List all course categories.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests session.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>token</code> <code>str</code> <p>Webservice token used for the request.</p> required <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List[Dict[str, Any]]: Categories sorted by ID.</p> <p>Raises:</p> Type Description <code>MoodleCategoryError</code> <p>If the request fails.</p>"},{"location":"api/category/#py_moodle.category.get_category","title":"get_category","text":"<pre><code>get_category(\n    session: Session,\n    base_url: str,\n    token: str,\n    categoryid: int,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Retrieve a single category by ID using the webservice.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests session.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>token</code> <code>str</code> <p>Webservice token used for the request.</p> required <code>categoryid</code> <code>int</code> <p>Identifier of the category to fetch.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Category information.</p> <p>Raises:</p> Type Description <code>MoodleCategoryError</code> <p>If the request fails or the category is missing.</p>"},{"location":"api/category/#py_moodle.category.create_category_form","title":"create_category_form","text":"<pre><code>create_category_form(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    name: str,\n    parent: int = 0,\n    description: str = \"\",\n) -&gt; Dict[str, Any]\n</code></pre> <p>Create a new course category using the form endpoint.</p> <p>This method mimics a browser interaction and does not require webservice permissions.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests session.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for form submissions.</p> required <code>name</code> <code>str</code> <p>Name of the category to create.</p> required <code>parent</code> <code>int</code> <p>ID of the parent category.</p> <code>0</code> <code>description</code> <code>str</code> <p>Optional HTML description.</p> <code>''</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Newly created category data.</p> <p>Raises:</p> Type Description <code>MoodleCategoryError</code> <p>If the category cannot be created.</p>"},{"location":"api/category/#py_moodle.category.delete_category_form","title":"delete_category_form","text":"<pre><code>delete_category_form(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    categoryid: int,\n) -&gt; bool\n</code></pre> <p>Delete a category by mimicking the browser flow.</p> <p>Uses <code>course/management.php</code> and does not require webservice permissions.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests session.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for form submissions.</p> required <code>categoryid</code> <code>int</code> <p>ID of the category to delete.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if the deletion appears successful.</p> <p>Raises:</p> Type Description <code>MoodleCategoryError</code> <p>If the deletion fails.</p>"},{"location":"api/category/#py_moodle.category.create_category","title":"create_category","text":"<pre><code>create_category(\n    session: Session,\n    base_url: str,\n    name: str,\n    parent: int = 0,\n    token: Optional[str] = None,\n    sesskey: Optional[str] = None,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Create a category using form post or webservice.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests session.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>name</code> <code>str</code> <p>Name of the category.</p> required <code>parent</code> <code>int</code> <p>ID of the parent category.</p> <code>0</code> <code>token</code> <code>Optional[str]</code> <p>Webservice token (optional).</p> <code>None</code> <code>sesskey</code> <code>Optional[str]</code> <p>Session key (optional).</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Created category data.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither <code>sesskey</code> nor <code>token</code> is provided.</p>"},{"location":"api/category/#py_moodle.category.delete_category","title":"delete_category","text":"<pre><code>delete_category(\n    session: Session,\n    base_url: str,\n    categoryid: int,\n    token: Optional[str] = None,\n    sesskey: Optional[str] = None,\n) -&gt; bool\n</code></pre> <p>Delete a category using form post or webservice.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests session.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>categoryid</code> <code>int</code> <p>ID of the category to delete.</p> required <code>token</code> <code>Optional[str]</code> <p>Webservice token (optional).</p> <code>None</code> <code>sesskey</code> <code>Optional[str]</code> <p>Session key (optional).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if the deletion appears successful.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither <code>sesskey</code> nor <code>token</code> is provided.</p>"},{"location":"api/course/","title":"Course","text":""},{"location":"api/course/#py_moodle.course","title":"py_moodle.course","text":"<p>Course management module for Moodle.</p> <p>Provides functions to list courses, retrieve course details, and enumerate course sections using AJAX endpoints.</p> <p>Classes:</p> Name Description <code>MoodleCourseError</code> <p>Exception raised for errors in course operations.</p> <p>Functions:</p> Name Description <code>get_course_context_id</code> <p>Get the context ID for a course by scraping its main page.</p> <code>list_courses</code> <p>List all courses visible to the user.</p> <code>create_course</code> <p>Create a new course using the web form.</p> <code>delete_course</code> <p>Delete a course by ID using the web interface.</p> <code>get_course</code> <p>Get details for a specific course.</p> <code>get_course_with_sections_and_modules</code> <p>Return full course data with sections and modules.</p> <code>list_sections</code> <p>Extract a list of sections from course contents.</p>"},{"location":"api/course/#py_moodle.course-classes","title":"Classes","text":""},{"location":"api/course/#py_moodle.course.MoodleCourseError","title":"MoodleCourseError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in course operations.</p>"},{"location":"api/course/#py_moodle.course-functions","title":"Functions","text":""},{"location":"api/course/#py_moodle.course.get_course_context_id","title":"get_course_context_id","text":"<pre><code>get_course_context_id(\n    session: Session, base_url: str, course_id: int\n) -&gt; int\n</code></pre> <p>Get the context ID for a course by scraping its main page.</p> <p>This mimics how the frontend retrieves the ID, making it the most reliable method.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests session.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>course_id</code> <code>int</code> <p>Identifier of the course.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Context ID of the course.</p> <p>Raises:</p> Type Description <code>MoodleCourseError</code> <p>If the context ID cannot be found.</p>"},{"location":"api/course/#py_moodle.course.list_courses","title":"list_courses","text":"<pre><code>list_courses(\n    session: Session,\n    base_url: str,\n    *,\n    token: str | None = None,\n    sesskey: str | None = None\n) -&gt; List[Dict[str, Any]]\n</code></pre> <p>List all courses visible to the user.</p> <p>Uses the <code>core_course_get_courses</code> webservice when a token is available and falls back to the AJAX endpoint otherwise.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests session.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>token</code> <code>str | None</code> <p>Webservice token for REST API (optional, preferred).</p> <code>None</code> <code>sesskey</code> <code>str | None</code> <p>Session key for AJAX calls (optional, fallback).</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List[Dict[str, Any]]: List of course dictionaries.</p> <p>Raises:</p> Type Description <code>MoodleCourseError</code> <p>If the request fails.</p>"},{"location":"api/course/#py_moodle.course.create_course","title":"create_course","text":"<pre><code>create_course(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    fullname: str,\n    shortname: str,\n    categoryid: int = 1,\n    visible: int = 1,\n    summary: str = \"\",\n    startdate: dict = None,\n    enddate: dict = None,\n    numsections: int = 4,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Create a new course using the web form.</p> <p>Simulates browser behavior by posting to <code>edit.php</code>.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests session.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for AJAX calls.</p> required <code>fullname</code> <code>str</code> <p>Full name of the course.</p> required <code>shortname</code> <code>str</code> <p>Short name of the course.</p> required <code>categoryid</code> <code>int</code> <p>Category ID.</p> <code>1</code> <code>visible</code> <code>int</code> <p>Visibility flag (1 for visible, 0 for hidden).</p> <code>1</code> <code>summary</code> <code>str</code> <p>Course summary.</p> <code>''</code> <code>startdate</code> <code>dict</code> <p>Dict with keys <code>day</code>, <code>month</code>, <code>year</code>, <code>hour</code>, <code>minute</code>.</p> <code>None</code> <code>enddate</code> <code>dict</code> <p>Dict with keys <code>enabled</code>, <code>day</code>, <code>month</code>, <code>year</code>, <code>hour</code>, <code>minute</code>.</p> <code>None</code> <code>numsections</code> <code>int</code> <p>Number of sections.</p> <code>4</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Created course dictionary with at least <code>id</code>, <code>fullname</code> and <code>shortname</code>.</p> <p>Raises:</p> Type Description <code>MoodleCourseError</code> <p>If the request fails.</p>"},{"location":"api/course/#py_moodle.course.delete_course","title":"delete_course","text":"<pre><code>delete_course(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    courseid: int,\n    force: bool = False,\n) -&gt; None\n</code></pre> <p>Delete a course by ID using the web interface.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests session.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for AJAX calls.</p> required <code>courseid</code> <code>int</code> <p>ID of the course to delete.</p> required <code>force</code> <code>bool</code> <p>Whether to skip confirmation and delete directly.</p> <code>False</code> <p>Raises:</p> Type Description <code>MoodleCourseError</code> <p>If the request fails.</p>"},{"location":"api/course/#py_moodle.course.get_course","title":"get_course","text":"<pre><code>get_course(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    courseid: int,\n    token: str = None,\n) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get details for a specific course.</p> <p>Attempts the webservice first and falls back to AJAX if necessary.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests session.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for AJAX calls.</p> required <code>courseid</code> <code>int</code> <p>Identifier of the course to fetch.</p> required <code>token</code> <code>str</code> <p>Webservice token (optional).</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List[Dict[str, Any]]: Course contents including sections and modules.</p> <p>Raises:</p> Type Description <code>MoodleCourseError</code> <p>If both webservice and AJAX requests fail.</p>"},{"location":"api/course/#py_moodle.course.get_course_with_sections_and_modules","title":"get_course_with_sections_and_modules","text":"<pre><code>get_course_with_sections_and_modules(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    courseid: int,\n    token: str = None,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Return full course data with sections and modules.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests session.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for AJAX calls.</p> required <code>courseid</code> <code>int</code> <p>Identifier of the course to fetch.</p> required <code>token</code> <code>str</code> <p>Webservice token (optional).</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Course dictionary with keys <code>id</code>, <code>fullname</code>,</p> <code>Dict[str, Any]</code> <p><code>shortname</code> and a list of <code>sections</code> containing their modules.</p>"},{"location":"api/course/#py_moodle.course.list_sections","title":"list_sections","text":"<pre><code>list_sections(\n    course_contents: List[Dict[str, Any]],\n) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Extract a list of sections from course contents.</p> <p>Parameters:</p> Name Type Description Default <code>course_contents</code> <code>List[Dict[str, Any]]</code> <p>Output from <code>get_course</code>.</p> required <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List[Dict[str, Any]]: Each dictionary represents a section.</p> Notes <p>This function expects the output of <code>get_course</code>.</p>"},{"location":"api/draftfile/","title":"Draftfile","text":""},{"location":"api/draftfile/#py_moodle.draftfile","title":"py_moodle.draftfile","text":"<p>Draft file management module for Moodle CLI.</p> <p>Provides functions to create draft areas, upload files to the draft area, list draft files, and manage draft IDs needed for Moodle module creation.</p> <p>All code and comments must be in English.</p> <p>Classes:</p> Name Description <code>MoodleDraftFileError</code> <p>Exception raised for errors in draft file operations.</p> <p>Functions:</p> Name Description <code>get_new_draft_itemid</code> <p>Obtain a new draft item ID for the current user.</p> <code>detect_upload_repo</code> <p>Detects the upload repository ID by scraping the filemanager configuration</p> <code>upload_file_to_draft_area</code> <p>Uploads a file to a draft area using the session-based AJAX endpoint,</p> <code>list_draft_files</code> <p>List files in a Moodle draft area.</p>"},{"location":"api/draftfile/#py_moodle.draftfile-classes","title":"Classes","text":""},{"location":"api/draftfile/#py_moodle.draftfile.MoodleDraftFileError","title":"MoodleDraftFileError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in draft file operations.</p>"},{"location":"api/draftfile/#py_moodle.draftfile-functions","title":"Functions","text":""},{"location":"api/draftfile/#py_moodle.draftfile.get_new_draft_itemid","title":"get_new_draft_itemid","text":"<pre><code>get_new_draft_itemid(\n    session: Session, base_url: str, sesskey: str\n) -&gt; int\n</code></pre> <p>Obtain a new draft item ID for the current user. This is done by getting the user's private files info, which contains a valid itemid.</p>"},{"location":"api/draftfile/#py_moodle.draftfile.detect_upload_repo","title":"detect_upload_repo","text":"<pre><code>detect_upload_repo(\n    session: Session, base_url: str, course_id: int\n) -&gt; int\n</code></pre> <p>Detects the upload repository ID by scraping the filemanager configuration from the course edit page. This is the most robust method.</p>"},{"location":"api/draftfile/#py_moodle.draftfile.upload_file_to_draft_area","title":"upload_file_to_draft_area","text":"<pre><code>upload_file_to_draft_area(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    course_id: int,\n    course_context_id: int,\n    file_path: str,\n    itemid: Optional[int] = None,\n    savepath: str = \"/\",\n    timeout: tuple = (300, 3600),\n    progress_callback: Optional[\n        Callable[[int], None]\n    ] = None,\n) -&gt; Tuple[int, str]\n</code></pre> <p>Uploads a file to a draft area using the session-based AJAX endpoint, returning the itemid of the draft area and the final filename. If the file exists, Moodle renames it; this function returns the new name.</p>"},{"location":"api/draftfile/#py_moodle.draftfile.list_draft_files","title":"list_draft_files","text":"<pre><code>list_draft_files(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    draft_itemid: int,\n) -&gt; List[Dict[str, Any]]\n</code></pre> <p>List files in a Moodle draft area.</p>"},{"location":"api/folder/","title":"Folder","text":""},{"location":"api/folder/#py_moodle.folder","title":"py_moodle.folder","text":"<p>Folder module management for Moodle CLI.</p> <p>Provides functions to create, update, and delete 'folder' modules, as well as manage their contents (add, remove, rename files) using Moodle's web forms and AJAX endpoints.</p> <p>All code and comments are in English.</p> <p>Classes:</p> Name Description <code>MoodleFolderError</code> <p>Exception raised for errors in folder operations.</p> <p>Functions:</p> Name Description <code>add_folder</code> <p>Creates a new folder module by calling the generic module creation function.</p> <code>delete_folder</code> <p>Deletes a folder module by calling the generic module deletion function.</p> <code>add_file_to_folder</code> <p>Adds a file to an existing folder and saves.</p> <code>delete_file_from_folder</code> <p>Deletes a file from an existing folder and saves.</p> <code>rename_file_in_folder</code> <p>Renames a file in an existing folder and saves.</p> <code>list_folder_content</code> <p>Lists the files inside a folder module by parsing its view page.</p>"},{"location":"api/folder/#py_moodle.folder-classes","title":"Classes","text":""},{"location":"api/folder/#py_moodle.folder.MoodleFolderError","title":"MoodleFolderError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in folder operations.</p>"},{"location":"api/folder/#py_moodle.folder-functions","title":"Functions","text":""},{"location":"api/folder/#py_moodle.folder.add_folder","title":"add_folder","text":"<pre><code>add_folder(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    course_id: int,\n    section_id: int,\n    name: str,\n    files_itemid: int,\n    intro_html: str = \"\",\n    visible: int = 1,\n) -&gt; int\n</code></pre> <p>Creates a new folder module by calling the generic module creation function.</p>"},{"location":"api/folder/#py_moodle.folder.delete_folder","title":"delete_folder","text":"<pre><code>delete_folder(\n    session: Session, base_url: str, sesskey: str, cmid: int\n) -&gt; bool\n</code></pre> <p>Deletes a folder module by calling the generic module deletion function.</p>"},{"location":"api/folder/#py_moodle.folder.add_file_to_folder","title":"add_file_to_folder","text":"<pre><code>add_file_to_folder(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    cmid: int,\n    file_path: str,\n    subfolder: str = \"/\",\n    progress_callback: Optional[\n        Callable[[int], None]\n    ] = None,\n) -&gt; Tuple[bool, Optional[str]]\n</code></pre> <p>Adds a file to an existing folder and saves. Returns a tuple: (success_status, final_filename_on_moodle).</p>"},{"location":"api/folder/#py_moodle.folder.delete_file_from_folder","title":"delete_file_from_folder","text":"<pre><code>delete_file_from_folder(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    cmid: int,\n    filename: str,\n) -&gt; bool\n</code></pre> <p>Deletes a file from an existing folder and saves.</p>"},{"location":"api/folder/#py_moodle.folder.rename_file_in_folder","title":"rename_file_in_folder","text":"<pre><code>rename_file_in_folder(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    cmid: int,\n    old_filename: str,\n    new_filename: str,\n) -&gt; bool\n</code></pre> <p>Renames a file in an existing folder and saves.</p>"},{"location":"api/folder/#py_moodle.folder.list_folder_content","title":"list_folder_content","text":"<pre><code>list_folder_content(\n    session: Session, base_url: str, cmid: int\n) -&gt; List[str]\n</code></pre> <p>Lists the files inside a folder module by parsing its view page.</p>"},{"location":"api/label/","title":"Label","text":""},{"location":"api/label/#py_moodle.label","title":"py_moodle.label","text":"<p>Label management module for <code>py-moodle</code>.</p> <p>Classes:</p> Name Description <code>MoodleLabelError</code> <p>Exception raised for errors in label operations.</p> <p>Functions:</p> Name Description <code>add_label</code> <p>Creates a new label by calling the generic module creation function.</p> <code>delete_label</code> <p>Deletes a label module by calling the generic module deletion function.</p> <code>update_label</code> <p>Updates a label's content, name, or visibility by calling the generic module update function.</p>"},{"location":"api/label/#py_moodle.label-attributes","title":"Attributes","text":""},{"location":"api/label/#py_moodle.label.MODULE_NAME","title":"MODULE_NAME  <code>module-attribute</code>","text":"<pre><code>MODULE_NAME = 'label'\n</code></pre>"},{"location":"api/label/#py_moodle.label-classes","title":"Classes","text":""},{"location":"api/label/#py_moodle.label.MoodleLabelError","title":"MoodleLabelError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in label operations.</p>"},{"location":"api/label/#py_moodle.label-functions","title":"Functions","text":""},{"location":"api/label/#py_moodle.label.add_label","title":"add_label","text":"<pre><code>add_label(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    course_id: int,\n    section_id: int,\n    html: str,\n    name: str = \"Label (via CLI)\",\n    visible: int = 1,\n) -&gt; int\n</code></pre> <p>Creates a new label by calling the generic module creation function.</p>"},{"location":"api/label/#py_moodle.label.delete_label","title":"delete_label","text":"<pre><code>delete_label(\n    session: Session, base_url: str, sesskey: str, cmid: int\n) -&gt; bool\n</code></pre> <p>Deletes a label module by calling the generic module deletion function.</p>"},{"location":"api/label/#py_moodle.label.update_label","title":"update_label","text":"<pre><code>update_label(\n    session: Session,\n    base_url: str,\n    cmid: int,\n    html: Optional[str] = None,\n    name: Optional[str] = None,\n    visible: Optional[int] = None,\n) -&gt; bool\n</code></pre> <p>Updates a label's content, name, or visibility by calling the generic module update function.</p>"},{"location":"api/module/","title":"Module","text":""},{"location":"api/module/#py_moodle.module","title":"py_moodle.module","text":"<p>Generic Moodle module management helpers. All code and comments are in English.</p> <p>Classes:</p> Name Description <code>MoodleModuleError</code> <p>Generic exception for module operations.</p> <p>Functions:</p> Name Description <code>add_generic_module</code> <p>Adds a new module to a course section by simulating a form post to modedit.php.</p> <code>update_generic_module</code> <p>Updates an existing module by fetching its edit form, modifying fields, and submitting it.</p> <code>delete_module</code> <p>Deletes any module by its cmid.</p> <code>get_module_info</code> <p>Return raw info for a single module.</p> <code>get_module_context_id</code> <p>Gets the context ID for a given course module by scraping its edit page.</p> <code>format_module_table</code> <p>Pretty table with Rich if available, else plain text.</p> <code>get_module_types</code> <p>Fetches a list of all available module types that the user can add to a specific course.</p> <code>rename_module_name</code> <p>Renames the name of any course module using the generic 'inplace_editable' AJAX endpoint.</p>"},{"location":"api/module/#py_moodle.module-classes","title":"Classes","text":""},{"location":"api/module/#py_moodle.module.MoodleModuleError","title":"MoodleModuleError","text":"<p>               Bases: <code>Exception</code></p> <p>Generic exception for module operations.</p>"},{"location":"api/module/#py_moodle.module-functions","title":"Functions","text":""},{"location":"api/module/#py_moodle.module.add_generic_module","title":"add_generic_module","text":"<pre><code>add_generic_module(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    module_name: str,\n    course_id: int,\n    section_id: int,\n    specific_payload: Dict[str, Any],\n    module_id: Optional[int] = None,\n) -&gt; int\n</code></pre> <p>Adds a new module to a course section by simulating a form post to modedit.php. This is a generic function that handles the common logic for all module types.</p> <p>Returns:</p> Type Description <code>int</code> <p>The new course module ID (cmid) as an integer.</p>"},{"location":"api/module/#py_moodle.module.update_generic_module","title":"update_generic_module","text":"<pre><code>update_generic_module(\n    session: Session,\n    base_url: str,\n    cmid: int,\n    specific_payload: Dict[str, Any],\n) -&gt; bool\n</code></pre> <p>Updates an existing module by fetching its edit form, modifying fields, and submitting it. This generic approach ensures that all existing form values are preserved.</p>"},{"location":"api/module/#py_moodle.module.delete_module","title":"delete_module","text":"<pre><code>delete_module(\n    session: Session, base_url: str, sesskey: str, cmid: int\n) -&gt; bool\n</code></pre> <p>Deletes any module by its cmid. It automatically discovers the course_id from the cmid.</p>"},{"location":"api/module/#py_moodle.module.get_module_info","title":"get_module_info","text":"<pre><code>get_module_info(\n    session: Session, base_url: str, sesskey: str, cmid: int\n) -&gt; Dict[str, Any]\n</code></pre> <p>Return raw info for a single module.</p> <p>Preference order: 1. WebService REST call with token (core_course_get_course_module) 2. Legacy AJAX call (fallback)</p> <p>Raises MoodleModuleError if both methods fail.</p>"},{"location":"api/module/#py_moodle.module.get_module_context_id","title":"get_module_context_id","text":"<pre><code>get_module_context_id(\n    session: Session, base_url: str, cmid: int\n) -&gt; int\n</code></pre> <p>Gets the context ID for a given course module by scraping its edit page. This is the most reliable method.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>An authenticated requests.Session object.</p> required <code>base_url</code> <code>str</code> <p>The base URL of the Moodle instance.</p> required <code>cmid</code> <code>int</code> <p>The course module ID (cmid).</p> required <p>Returns:</p> Type Description <code>int</code> <p>The integer context ID of the module.</p> <p>Raises:</p> Type Description <code>MoodleModuleError</code> <p>If the context ID cannot be found.</p>"},{"location":"api/module/#py_moodle.module.format_module_table","title":"format_module_table","text":"<pre><code>format_module_table(module: Dict[str, Any]) -&gt; str\n</code></pre> <p>Pretty table with Rich if available, else plain text.</p>"},{"location":"api/module/#py_moodle.module.get_module_types","title":"get_module_types","text":"<pre><code>get_module_types(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    course_id: int,\n) -&gt; list[dict[str, Any]]\n</code></pre> <p>Fetches a list of all available module types that the user can add to a specific course.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests.Session object.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for the AJAX call.</p> required <code>course_id</code> <code>int</code> <p>The ID of the course to check capabilities against. Can be 1, the default internal course in Moodle.</p> required <p>Returns:</p> Name Type Description <code>list[dict[str, Any]]</code> <p>A list of dictionaries, where each dict represents a module type.</p> <code>Example</code> <code>list[dict[str, Any]]</code> <p>[{'id': 12, 'name': 'label', 'title': 'Etiqueta'}, ...]</p>"},{"location":"api/module/#py_moodle.module.rename_module_name","title":"rename_module_name","text":"<pre><code>rename_module_name(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    cmid: int,\n    name: str,\n) -&gt; bool\n</code></pre> <p>Renames the name of any course module using the generic 'inplace_editable' AJAX endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests.Session object.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for the AJAX call.</p> required <code>cmid</code> <code>int</code> <p>The course module ID (cmid) of the activity to rename.</p> required <code>name</code> <code>str</code> <p>The new name for the module.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the renaming was successful.</p> <p>Raises:</p> Type Description <code>MoodleModuleError</code> <p>If the AJAX call fails or returns an error.</p>"},{"location":"api/page/","title":"Page","text":""},{"location":"api/page/#py_moodle.page","title":"py_moodle.page","text":"<p>Page module management for Moodle CLI.</p> <p>Provides functions to create and delete 'page' modules, allowing HTML content to be added to a course. All code and comments are in English.</p> <p>Classes:</p> Name Description <code>MoodlePageError</code> <p>Exception raised for errors in page operations.</p> <p>Functions:</p> Name Description <code>add_page</code> <p>Create a new page module with the provided HTML content.</p> <code>delete_page</code> <p>Delete a page module by its course module ID.</p>"},{"location":"api/page/#py_moodle.page-attributes","title":"Attributes","text":""},{"location":"api/page/#py_moodle.page.MODULE_NAME","title":"MODULE_NAME  <code>module-attribute</code>","text":"<pre><code>MODULE_NAME = 'page'\n</code></pre>"},{"location":"api/page/#py_moodle.page-classes","title":"Classes","text":""},{"location":"api/page/#py_moodle.page.MoodlePageError","title":"MoodlePageError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in page operations.</p>"},{"location":"api/page/#py_moodle.page-functions","title":"Functions","text":""},{"location":"api/page/#py_moodle.page.add_page","title":"add_page","text":"<pre><code>add_page(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    course_id: int,\n    section_id: int,\n    name: str,\n    content: str,\n    intro: str = \"\",\n    visible: int = 1,\n) -&gt; int\n</code></pre> <p>Create a new page module with the provided HTML content.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated <code>requests.Session</code> object.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for form submissions.</p> required <code>course_id</code> <code>int</code> <p>ID of the course to add the page to.</p> required <code>section_id</code> <code>int</code> <p>ID of the section within the course.</p> required <code>name</code> <code>str</code> <p>Name of the page module.</p> required <code>content</code> <code>str</code> <p>HTML content of the page.</p> required <code>intro</code> <code>str</code> <p>Optional introduction displayed above the content.</p> <code>''</code> <code>visible</code> <code>int</code> <p>Whether the module is visible (1) or hidden (0).</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>The new course module ID (cmid).</p>"},{"location":"api/page/#py_moodle.page.delete_page","title":"delete_page","text":"<pre><code>delete_page(\n    session: Session, base_url: str, sesskey: str, cmid: int\n) -&gt; bool\n</code></pre> <p>Delete a page module by its course module ID.</p>"},{"location":"api/resource/","title":"Resource","text":""},{"location":"api/resource/#py_moodle.resource","title":"py_moodle.resource","text":"<p>Resource module management for Moodle CLI.</p> <p>Provides functions to create and delete 'resource' modules (single files) using Moodle's web forms and AJAX endpoints. All code and comments are in English.</p> <p>Classes:</p> Name Description <code>MoodleResourceError</code> <p>Exception raised for errors in resource operations.</p> <p>Functions:</p> Name Description <code>add_resource</code> <p>Create a new resource module by uploading a single file.</p> <code>delete_resource</code> <p>Delete a resource module by its course module ID.</p>"},{"location":"api/resource/#py_moodle.resource-attributes","title":"Attributes","text":""},{"location":"api/resource/#py_moodle.resource.MODULE_NAME","title":"MODULE_NAME  <code>module-attribute</code>","text":"<pre><code>MODULE_NAME = 'resource'\n</code></pre>"},{"location":"api/resource/#py_moodle.resource-classes","title":"Classes","text":""},{"location":"api/resource/#py_moodle.resource.MoodleResourceError","title":"MoodleResourceError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in resource operations.</p>"},{"location":"api/resource/#py_moodle.resource-functions","title":"Functions","text":""},{"location":"api/resource/#py_moodle.resource.add_resource","title":"add_resource","text":"<pre><code>add_resource(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    course_id: int,\n    section_id: int,\n    name: str,\n    file_path: str,\n    intro: str = \"\",\n    visible: int = 1,\n    progress_callback: Optional[\n        Callable[[int], None]\n    ] = None,\n) -&gt; int\n</code></pre> <p>Create a new resource module by uploading a single file.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated <code>requests.Session</code> object.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for form submissions.</p> required <code>course_id</code> <code>int</code> <p>ID of the course to add the resource to.</p> required <code>section_id</code> <code>int</code> <p>ID of the section within the course.</p> required <code>name</code> <code>str</code> <p>Name of the resource module.</p> required <code>file_path</code> <code>str</code> <p>Local path to the file to upload.</p> required <code>intro</code> <code>str</code> <p>Optional HTML introduction for the resource.</p> <code>''</code> <code>visible</code> <code>int</code> <p>Whether the module is visible (1) or hidden (0).</p> <code>1</code> <code>progress_callback</code> <code>Optional[Callable[[int], None]]</code> <p>Optional callback for upload progress.</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>The new course module ID (cmid).</p>"},{"location":"api/resource/#py_moodle.resource.delete_resource","title":"delete_resource","text":"<pre><code>delete_resource(\n    session: Session, base_url: str, sesskey: str, cmid: int\n) -&gt; bool\n</code></pre> <p>Delete a resource module by its course module ID.</p>"},{"location":"api/scorm/","title":"Scorm","text":""},{"location":"api/scorm/#py_moodle.scorm","title":"py_moodle.scorm","text":"<p>SCORM module management for <code>py-moodle</code>.</p> <p>Classes:</p> Name Description <code>MoodleScormError</code> <p>Exception raised for errors in SCORM operations.</p> <p>Functions:</p> Name Description <code>add_scorm</code> <p>Creates a new SCORM module using the webservice for file upload.</p> <code>add_scorm_ajax</code> <p>Creates a new SCORM package module by uploading the file and using the generic module creation function.</p>"},{"location":"api/scorm/#py_moodle.scorm-attributes","title":"Attributes","text":""},{"location":"api/scorm/#py_moodle.scorm.MODULE_NAME","title":"MODULE_NAME  <code>module-attribute</code>","text":"<pre><code>MODULE_NAME = 'scorm'\n</code></pre>"},{"location":"api/scorm/#py_moodle.scorm-classes","title":"Classes","text":""},{"location":"api/scorm/#py_moodle.scorm.MoodleScormError","title":"MoodleScormError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in SCORM operations.</p>"},{"location":"api/scorm/#py_moodle.scorm-functions","title":"Functions","text":""},{"location":"api/scorm/#py_moodle.scorm.add_scorm","title":"add_scorm","text":"<pre><code>add_scorm(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    course_id: int,\n    section_id: int,\n    name: str,\n    file_path: str,\n    intro: str = \"\",\n    visible: int = 1,\n    progress_callback: Optional[\n        Callable[[int], None]\n    ] = None,\n    **kwargs: Any\n) -&gt; int\n</code></pre> <p>Creates a new SCORM module using the webservice for file upload.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests.Session object.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for form submissions.</p> required <code>course_id</code> <code>int</code> <p>ID of the course where the SCORM will be added.</p> required <code>section_id</code> <code>int</code> <p>ID of the section where the SCORM will be added.</p> required <code>name</code> <code>str</code> <p>Name of the SCORM activity.</p> required <code>file_path</code> <code>str</code> <p>Local path to the SCORM package (.zip).</p> required <code>intro</code> <code>str</code> <p>Introduction or description for the SCORM activity.</p> <code>''</code> <code>visible</code> <code>int</code> <p>Visibility of the activity (1 for visible, 0 for hidden).</p> <code>1</code> <code>progress_callback</code> <code>Optional[Callable[[int], None]]</code> <p>Optional callback to report upload progress.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional SCORM-specific settings.</p> <code>{}</code> <p>Returns:</p> Type Description <code>int</code> <p>The new course module ID (cmid) of the created SCORM package.</p>"},{"location":"api/scorm/#py_moodle.scorm.add_scorm_ajax","title":"add_scorm_ajax","text":"<pre><code>add_scorm_ajax(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    course_id: int,\n    section_id: int,\n    name: str,\n    file_path: str,\n    intro: str = \"\",\n    visible: int = 1,\n    progress_callback: Optional[\n        Callable[[int], None]\n    ] = None,\n    **kwargs: Any\n) -&gt; int\n</code></pre> <p>Creates a new SCORM package module by uploading the file and using the generic module creation function.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests.Session object.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for form submissions.</p> required <code>course_id</code> <code>int</code> <p>The ID of the course to add the SCORM to.</p> required <code>section_id</code> <code>int</code> <p>The ID of the section to add the SCORM to.</p> required <code>name</code> <code>str</code> <p>The name of the SCORM activity.</p> required <code>file_path</code> <code>str</code> <p>The local path to the SCORM .zip file.</p> required <code>intro</code> <code>str</code> <p>The introduction or description for the SCORM activity.</p> <code>''</code> <code>visible</code> <code>int</code> <p>Whether the activity is visible (1) or hidden (0).</p> <code>1</code> <code>**kwargs</code> <code>Any</code> <p>Optional overrides for advanced SCORM settings.</p> <code>{}</code> <p>Returns:</p> Type Description <code>int</code> <p>The new course module ID (cmid) of the created SCORM package.</p>"},{"location":"api/section/","title":"Section","text":""},{"location":"api/section/#py_moodle.section","title":"py_moodle.section","text":"<p>Section management module for Moodle CLI.</p> <p>Provides functions to list, create, and delete course sections using AJAX endpoints.</p> <p>All code and comments must be in English.</p> <p>Classes:</p> Name Description <code>MoodleSectionError</code> <p>Exception raised for errors in section operations.</p> <p>Functions:</p> Name Description <code>list_sections</code> <p>List all sections and modules for a given course using core_courseformat_get_state.</p> <code>create_section</code> <p>Create a new section in a course.</p> <code>delete_section</code> <p>Delete a section from a course.</p>"},{"location":"api/section/#py_moodle.section-classes","title":"Classes","text":""},{"location":"api/section/#py_moodle.section.MoodleSectionError","title":"MoodleSectionError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in section operations.</p>"},{"location":"api/section/#py_moodle.section-functions","title":"Functions","text":""},{"location":"api/section/#py_moodle.section.list_sections","title":"list_sections","text":"<pre><code>list_sections(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    courseid: int,\n) -&gt; Dict[str, Any]\n</code></pre> <p>List all sections and modules for a given course using core_courseformat_get_state.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests.Session object.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for AJAX calls.</p> required <code>courseid</code> <code>int</code> <p>ID of the course.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary with keys: 'course', 'section', 'cm' (modules).</p> <p>Raises:</p> Type Description <code>MoodleSectionError</code> <p>If the request fails.</p>"},{"location":"api/section/#py_moodle.section.create_section","title":"create_section","text":"<pre><code>create_section(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    courseid: int,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Create a new section in a course.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests.Session object.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for AJAX calls.</p> required <code>courseid</code> <code>int</code> <p>ID of the course.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The last created section as a dictionary.</p> <p>Raises:</p> Type Description <code>MoodleSectionError</code> <p>If the request fails.</p>"},{"location":"api/section/#py_moodle.section.delete_section","title":"delete_section","text":"<pre><code>delete_section(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    courseid: int,\n    sectionid: int,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Delete a section from a course.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated requests.Session object.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for AJAX calls.</p> required <code>courseid</code> <code>int</code> <p>ID of the course.</p> required <code>sectionid</code> <code>int</code> <p>ID of the section to delete.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The response dictionary from Moodle.</p> <p>Raises:</p> Type Description <code>MoodleSectionError</code> <p>If the request fails.</p>"},{"location":"api/session/","title":"Session","text":""},{"location":"api/session/#py_moodle.session","title":"py_moodle.session","text":"<p>Reusable, thread-safe Moodle session.</p> <p>Lazy login on first access and cache sessions per environment.</p> <p>Classes:</p> Name Description <code>MoodleSessionError</code> <p>Raised when we cannot obtain token or sesskey.</p> <code>MoodleSession</code> <p>Reusable and thread-safe Moodle session manager.</p>"},{"location":"api/session/#py_moodle.session-classes","title":"Classes","text":""},{"location":"api/session/#py_moodle.session.MoodleSessionError","title":"MoodleSessionError","text":"<p>               Bases: <code>RuntimeError</code></p> <p>Raised when we cannot obtain token or sesskey.</p>"},{"location":"api/session/#py_moodle.session.MoodleSession","title":"MoodleSession","text":"<pre><code>MoodleSession(settings: Settings)\n</code></pre> <p>Reusable and thread-safe Moodle session manager.</p> <p>Initialize a session wrapper for the given settings.</p> <p>Methods:</p> Name Description <code>call</code> <p>Makes a call to the Moodle webservice API.</p> <code>get</code> <p>Return or create a cached session for the given environment.</p> <p>Attributes:</p> Name Type Description <code>settings</code> <code>session</code> <code>Session</code> <p>Return the authenticated requests.Session (login once).</p> <code>sesskey</code> <code>str</code> <p>Return the session key (guaranteed to exist).</p> <code>token</code> <code>str | None</code> <p>Return the webservice token, or None if not available.</p>"},{"location":"api/session/#py_moodle.session.MoodleSession-attributes","title":"Attributes","text":""},{"location":"api/session/#py_moodle.session.MoodleSession.settings","title":"settings  <code>instance-attribute</code>","text":"<pre><code>settings = settings\n</code></pre>"},{"location":"api/session/#py_moodle.session.MoodleSession.session","title":"session  <code>property</code>","text":"<pre><code>session: Session\n</code></pre> <p>Return the authenticated requests.Session (login once).</p>"},{"location":"api/session/#py_moodle.session.MoodleSession.sesskey","title":"sesskey  <code>property</code>","text":"<pre><code>sesskey: str\n</code></pre> <p>Return the session key (guaranteed to exist).</p>"},{"location":"api/session/#py_moodle.session.MoodleSession.token","title":"token  <code>property</code>","text":"<pre><code>token: str | None\n</code></pre> <p>Return the webservice token, or None if not available.</p>"},{"location":"api/session/#py_moodle.session.MoodleSession-functions","title":"Functions","text":""},{"location":"api/session/#py_moodle.session.MoodleSession.call","title":"call","text":"<pre><code>call(\n    wsfunction: str, params: Optional[Dict[str, Any]] = None\n) -&gt; Any\n</code></pre> <p>Makes a call to the Moodle webservice API.</p>"},{"location":"api/session/#py_moodle.session.MoodleSession.get","title":"get  <code>classmethod</code>","text":"<pre><code>get(env: str | None = None) -&gt; MoodleSession\n</code></pre> <p>Return or create a cached session for the given environment.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>str | None</code> <p>Environment key (e.g., <code>\"local\"</code> or <code>\"staging\"</code>).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>MoodleSession</code> <code>MoodleSession</code> <p>Cached session instance.</p>"},{"location":"api/session/#py_moodle.session-functions","title":"Functions","text":""},{"location":"api/settings/","title":"Settings","text":""},{"location":"api/settings/#py_moodle.settings","title":"py_moodle.settings","text":"<p>Single source of truth for configuration.</p> <p>Reads environment variables following the pattern <code>MOODLE_&lt;ENV&gt;_URL</code> / <code>USERNAME</code> / <code>PASSWORD</code> and supports environment-specific CAS URLs and predefined webservice tokens.</p> <p>Classes:</p> Name Description <code>Settings</code> <p>Holds all configuration for a specific Moodle environment.</p> <p>Functions:</p> Name Description <code>load_settings</code> <p>Load settings for the requested environment.</p>"},{"location":"api/settings/#py_moodle.settings-classes","title":"Classes","text":""},{"location":"api/settings/#py_moodle.settings.Settings","title":"Settings  <code>dataclass</code>","text":"<pre><code>Settings(\n    env_name: str,\n    url: str,\n    username: str,\n    password: str,\n    use_cas: bool,\n    cas_url: Optional[str],\n    webservice_token: Optional[str],\n)\n</code></pre> <p>Holds all configuration for a specific Moodle environment.</p> <p>Attributes:</p> Name Type Description <code>env_name</code> <code>str</code> <code>url</code> <code>str</code> <code>username</code> <code>str</code> <code>password</code> <code>str</code> <code>use_cas</code> <code>bool</code> <code>cas_url</code> <code>Optional[str]</code> <code>webservice_token</code> <code>Optional[str]</code>"},{"location":"api/settings/#py_moodle.settings.Settings-attributes","title":"Attributes","text":""},{"location":"api/settings/#py_moodle.settings.Settings.env_name","title":"env_name  <code>instance-attribute</code>","text":"<pre><code>env_name: str\n</code></pre>"},{"location":"api/settings/#py_moodle.settings.Settings.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url: str\n</code></pre>"},{"location":"api/settings/#py_moodle.settings.Settings.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username: str\n</code></pre>"},{"location":"api/settings/#py_moodle.settings.Settings.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password: str\n</code></pre>"},{"location":"api/settings/#py_moodle.settings.Settings.use_cas","title":"use_cas  <code>instance-attribute</code>","text":"<pre><code>use_cas: bool\n</code></pre>"},{"location":"api/settings/#py_moodle.settings.Settings.cas_url","title":"cas_url  <code>instance-attribute</code>","text":"<pre><code>cas_url: Optional[str]\n</code></pre>"},{"location":"api/settings/#py_moodle.settings.Settings.webservice_token","title":"webservice_token  <code>instance-attribute</code>","text":"<pre><code>webservice_token: Optional[str]\n</code></pre>"},{"location":"api/settings/#py_moodle.settings-functions","title":"Functions","text":""},{"location":"api/settings/#py_moodle.settings.load_settings","title":"load_settings","text":"<pre><code>load_settings(env: Optional[str] = None) -&gt; Settings\n</code></pre> <p>Load settings for the requested environment.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>Optional[str]</code> <p>Environment key (<code>\"local\"</code>, <code>\"staging\"</code>, <code>\"prod\"</code>, etc.). Falls back to the <code>MOODLE_ENV</code> variable if omitted.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Settings</code> <code>Settings</code> <p>Configuration object populated for the selected environment.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If any required core variable (URL, USERNAME, PASSWORD) is missing.</p>"},{"location":"api/upload/","title":"Upload","text":""},{"location":"api/upload/#py_moodle.upload","title":"py_moodle.upload","text":"<p>File uploading module for Moodle CLI using the webservice endpoint.</p> <p>This method requires a webservice token with 'core_files_upload' capability.</p> <p>Classes:</p> Name Description <code>MoodleUploadError</code> <p>Exception for webservice upload errors.</p> <code>ProgressTracker</code> <p>A file-like object that tracks the progress of reads and calls a callback.</p> <p>Functions:</p> Name Description <code>upload_file_webservice</code> <p>Uploads a file to the user's private draft area using webservice/upload.php</p>"},{"location":"api/upload/#py_moodle.upload-classes","title":"Classes","text":""},{"location":"api/upload/#py_moodle.upload.MoodleUploadError","title":"MoodleUploadError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception for webservice upload errors.</p>"},{"location":"api/upload/#py_moodle.upload.ProgressTracker","title":"ProgressTracker","text":"<pre><code>ProgressTracker(\n    file_path: str,\n    progress_callback: Optional[\n        Callable[[int], None]\n    ] = None,\n)\n</code></pre> <p>A file-like object that tracks the progress of reads and calls a callback. This is used to monitor file uploads with a progress bar.</p> <p>Methods:</p> Name Description <code>read</code> <p>Attributes:</p> Name Type Description <code>size</code> <code>read_so_far</code> <code>callback</code>"},{"location":"api/upload/#py_moodle.upload.ProgressTracker-attributes","title":"Attributes","text":""},{"location":"api/upload/#py_moodle.upload.ProgressTracker.size","title":"size  <code>instance-attribute</code>","text":"<pre><code>size = getsize(file_path)\n</code></pre>"},{"location":"api/upload/#py_moodle.upload.ProgressTracker.read_so_far","title":"read_so_far  <code>instance-attribute</code>","text":"<pre><code>read_so_far = 0\n</code></pre>"},{"location":"api/upload/#py_moodle.upload.ProgressTracker.callback","title":"callback  <code>instance-attribute</code>","text":"<pre><code>callback = progress_callback\n</code></pre>"},{"location":"api/upload/#py_moodle.upload.ProgressTracker-functions","title":"Functions","text":""},{"location":"api/upload/#py_moodle.upload.ProgressTracker.read","title":"read","text":"<pre><code>read(size=-1)\n</code></pre>"},{"location":"api/upload/#py_moodle.upload-functions","title":"Functions","text":""},{"location":"api/upload/#py_moodle.upload.upload_file_webservice","title":"upload_file_webservice","text":"<pre><code>upload_file_webservice(\n    base_url: str,\n    token: str,\n    file_path: str,\n    timeout: tuple = (30, 3600),\n    progress_callback: Optional[\n        Callable[[int], None]\n    ] = None,\n) -&gt; int\n</code></pre> <p>Uploads a file to the user's private draft area using webservice/upload.php and returns its draft itemid.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>The base URL of the Moodle instance.</p> required <code>token</code> <code>str</code> <p>A valid Moodle webservice token.</p> required <code>file_path</code> <code>str</code> <p>The local path to the file to upload.</p> required <code>timeout</code> <code>tuple</code> <p>Request timeout in seconds. default (30, 3600) 30s to connect, 1h to upload</p> <code>(30, 3600)</code> <code>progress_callback</code> <code>Optional[Callable[[int], None]]</code> <p>Optional function to call with bytes uploaded.</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>The integer itemid of the newly created draft area.</p> <p>Raises:</p> Type Description <code>MoodleUploadError</code> <p>If the upload fails or the response is invalid.</p>"},{"location":"api/url/","title":"Url","text":""},{"location":"api/url/#py_moodle.url","title":"py_moodle.url","text":"<p>URL module management for Moodle CLI.</p> <p>Provides functions to create and delete \"url\" modules linking to external resources. All code and comments are in English.</p> <p>Classes:</p> Name Description <code>MoodleUrlError</code> <p>Exception raised for errors in URL module operations.</p> <p>Functions:</p> Name Description <code>add_url</code> <p>Create a new URL module in a course section.</p> <code>delete_url</code> <p>Delete a URL module by its course module ID.</p>"},{"location":"api/url/#py_moodle.url-attributes","title":"Attributes","text":""},{"location":"api/url/#py_moodle.url.MODULE_NAME","title":"MODULE_NAME  <code>module-attribute</code>","text":"<pre><code>MODULE_NAME = 'url'\n</code></pre>"},{"location":"api/url/#py_moodle.url-classes","title":"Classes","text":""},{"location":"api/url/#py_moodle.url.MoodleUrlError","title":"MoodleUrlError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in URL module operations.</p>"},{"location":"api/url/#py_moodle.url-functions","title":"Functions","text":""},{"location":"api/url/#py_moodle.url.add_url","title":"add_url","text":"<pre><code>add_url(\n    session: Session,\n    base_url: str,\n    sesskey: str,\n    course_id: int,\n    section_id: int,\n    name: str,\n    external_url: str,\n    intro: str = \"\",\n    visible: int = 1,\n) -&gt; int\n</code></pre> <p>Create a new URL module in a course section.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>Authenticated <code>requests.Session</code> object.</p> required <code>base_url</code> <code>str</code> <p>Base URL of the Moodle instance.</p> required <code>sesskey</code> <code>str</code> <p>Session key for form submissions.</p> required <code>course_id</code> <code>int</code> <p>ID of the course to add the URL to.</p> required <code>section_id</code> <code>int</code> <p>ID of the section within the course.</p> required <code>name</code> <code>str</code> <p>Name of the URL module.</p> required <code>external_url</code> <code>str</code> <p>The external URL to be linked.</p> required <code>intro</code> <code>str</code> <p>Optional introduction or description for the URL.</p> <code>''</code> <code>visible</code> <code>int</code> <p>Visibility flag (1 for visible, 0 for hidden).</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>The new course module ID (cmid).</p>"},{"location":"api/url/#py_moodle.url.delete_url","title":"delete_url","text":"<pre><code>delete_url(\n    session: Session, base_url: str, sesskey: str, cmid: int\n) -&gt; bool\n</code></pre> <p>Delete a URL module by its course module ID.</p>"},{"location":"api/user/","title":"User","text":""},{"location":"api/user/#py_moodle.user","title":"py_moodle.user","text":"<p>User management module for Moodle.</p> <p>Provides functions to list, create, and delete users using Moodle webservice API, with a fallback to form-based actions if webservice permissions are missing.</p> <p>Classes:</p> Name Description <code>MoodleUserError</code> <p>Exception raised for errors in user operations.</p> <p>Functions:</p> Name Description <code>list_course_users</code> <p>List all enrolled users in a specific course.</p> <code>create_user</code> <p>Create a new user, trying webservice first and falling back to form post.</p> <code>delete_user</code> <p>Delete a user, trying webservice first and falling back to form post.</p>"},{"location":"api/user/#py_moodle.user-classes","title":"Classes","text":""},{"location":"api/user/#py_moodle.user.MoodleUserError","title":"MoodleUserError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in user operations.</p>"},{"location":"api/user/#py_moodle.user-functions","title":"Functions","text":""},{"location":"api/user/#py_moodle.user.list_course_users","title":"list_course_users","text":"<pre><code>list_course_users(\n    session: Session,\n    base_url: str,\n    token: str,\n    course_id: int,\n) -&gt; List[Dict[str, Any]]\n</code></pre> <p>List all enrolled users in a specific course.</p>"},{"location":"api/user/#py_moodle.user.create_user","title":"create_user","text":"<pre><code>create_user(\n    session: Session,\n    base_url: str,\n    token: str,\n    username: str,\n    password: str,\n    firstname: str,\n    lastname: str,\n    email: str,\n    sesskey: Optional[str] = None,\n    **kwargs: Any\n) -&gt; Dict[str, Any]\n</code></pre> <p>Create a new user, trying webservice first and falling back to form post.</p>"},{"location":"api/user/#py_moodle.user.delete_user","title":"delete_user","text":"<pre><code>delete_user(\n    session: Session,\n    base_url: str,\n    token: str,\n    user_id: int,\n    sesskey: Optional[str] = None,\n) -&gt; bool\n</code></pre> <p>Delete a user, trying webservice first and falling back to form post.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to py-moodle! This section will help you get up and running quickly.</p>"},{"location":"getting-started/#what-is-py-moodle","title":"What is py-moodle?","text":"<p>py-moodle is a modern Pythonic CLI and library that allows you to manage Moodle instances via web sessions. It provides both a command-line interface and a Python library for automating Moodle tasks.</p>"},{"location":"getting-started/#quick-navigation","title":"Quick Navigation","text":"<ul> <li>Installation - Install py-moodle on your system</li> <li>Configuration - Set up your Moodle credentials</li> <li>Quick Start - Your first py-moodle commands</li> </ul>"},{"location":"getting-started/#key-features","title":"Key Features","text":"<ul> <li>\u2705 Session-based authentication - No API tokens required</li> <li>\u2705 CAS/SSO support - Works with institutional logins  </li> <li>\u2705 Rich CLI interface - Beautiful terminal output</li> <li>\u2705 Python library - Integrate into your scripts</li> <li>\u2705 Multiple content types - Folders, assignments, SCORM, and more</li> </ul> <p>New to Moodle automation?</p> <p>Start with the Quick Start guide to see py-moodle in action within minutes.</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>py-moodle uses environment variables for configuration, typically stored in a <code>.env</code> file.</p>"},{"location":"getting-started/configuration/#setting-up-credentials","title":"Setting Up Credentials","text":"<ol> <li> <p>Copy the example file: <pre><code>cp .env.example .env\n</code></pre></p> </li> <li> <p>Edit the <code>.env</code> file: Replace <code>PROD</code> with the environment name you want to configure (<code>LOCAL</code>, <code>STAGING</code>, etc.).    <pre><code># Production environment\nMOODLE_PROD_URL=https://sandbox.moodledemo.net\n\n# Your Moodle credentials\nMOODLE_PROD_USERNAME=admin\nMOODLE_PROD_PASSWORD=sandbox24\n\n# Optional: for SSO/CAS authentication\n# MOODLE_PROD_CAS_URL=https://cas.myuni.edu/cas\n# Optional: predefined webservice token (required for CAS)\n# MOODLE_PROD_WS_TOKEN=your_webservice_token\n</code></pre></p> </li> </ol> <p>Security Warning</p> <p>The <code>.env</code> file contains sensitive credentials. Never commit it to version control or share it publicly.</p>"},{"location":"getting-started/configuration/#configuration-options","title":"Configuration Options","text":"Variable Pattern Description Required <code>MOODLE_&lt;ENV&gt;_URL</code> Base URL of the <code>&lt;ENV&gt;</code> Moodle instance \u2705 Yes <code>MOODLE_&lt;ENV&gt;_USERNAME</code> Username for the <code>&lt;ENV&gt;</code> instance \u2705 Yes <code>MOODLE_&lt;ENV&gt;_PASSWORD</code> Password for the <code>&lt;ENV&gt;</code> instance \u2705 Yes <code>MOODLE_&lt;ENV&gt;_CAS_URL</code> CAS server URL for SSO \u274c Optional <code>MOODLE_&lt;ENV&gt;_WS_TOKEN</code> Predefined webservice token (required for CAS) \u274c Optional"},{"location":"getting-started/configuration/#selecting-the-environment","title":"Selecting the Environment","text":"<p>Choose which environment configuration to use with the <code>--env</code> option or by setting <code>MOODLE_ENV</code>.</p> <pre><code>MOODLE_ENV=prod py-moodle courses list\n# or\npy-moodle --env prod courses list\n</code></pre> <p>If omitted, the environment defaults to <code>local</code>.</p>"},{"location":"getting-started/configuration/#testing-your-configuration","title":"Testing Your Configuration","text":"<p>Verify your credentials work:</p> <pre><code>py-moodle courses list\n</code></pre> <p>If configured correctly, you should see a list of available courses.</p>"},{"location":"getting-started/configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/configuration/#common-issues","title":"Common Issues","text":"<p>Invalid credentials error: - Double-check your username and password - Ensure the <code>MOODLE_&lt;ENV&gt;_URL</code> is correct and accessible - Try logging in through the web interface first</p> <p>SSL/TLS errors: - Some development instances use self-signed certificates - For testing only, you might need to disable SSL verification</p> <p>CAS authentication not working: - Ensure <code>MOODLE_&lt;ENV&gt;_CAS_URL</code> points to your institution's CAS server - Check that your credentials work through the CAS web interface - Verify that <code>MOODLE_&lt;ENV&gt;_WS_TOKEN</code> is set when CAS is enabled</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>py-moodle requires Python 3.8+ and can be installed in several ways.</p>"},{"location":"getting-started/installation/#method-1-pypi-recommended","title":"Method 1: PyPI (Recommended)","text":"<pre><code>pip install py-moodle\n</code></pre>"},{"location":"getting-started/installation/#method-2-from-source","title":"Method 2: From Source","text":"<p>Clone the repository and install:</p> <pre><code>git clone https://github.com/erseco/python-moodle.git\ncd py-moodle\npip install .\n</code></pre> <p>This makes the <code>py-moodle</code> command available system-wide.</p>"},{"location":"getting-started/installation/#method-3-development-installation","title":"Method 3: Development Installation","text":"<p>For development or to get the latest features:</p> <pre><code>git clone https://github.com/erseco/python-moodle.git\ncd py-moodle\npip install -e .\n</code></pre> <p>The <code>-e</code> flag installs in \"editable\" mode, so changes to the source code are immediately available.</p>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>Test that py-moodle is properly installed:</p> <pre><code>py-moodle --help\n</code></pre> <p>You should see the main help screen with available commands.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Configure your Moodle credentials</li> <li>Try your first commands</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>Get up and running with py-moodle in minutes!</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ installed</li> <li>Access to a Moodle instance</li> <li>Valid Moodle credentials</li> </ul>"},{"location":"getting-started/quickstart/#1-install-py-moodle","title":"1. Install py-moodle","text":"<pre><code>pip install py-moodle\n</code></pre>"},{"location":"getting-started/quickstart/#2-configure-credentials","title":"2. Configure Credentials","text":"<p>Create a <code>.env</code> file with your Moodle credentials:</p> <pre><code>cp .env.example .env\n</code></pre> <p>Edit the <code>.env</code> file (replace <code>PROD</code> with your target environment name):</p> <pre><code>MOODLE_PROD_URL=https://your-moodle-site.com\nMOODLE_PROD_USERNAME=your-username\nMOODLE_PROD_PASSWORD=your-password\n# Optional: CAS URL and token\n# MOODLE_PROD_CAS_URL=https://cas.your-institution.org/cas\n# MOODLE_PROD_WS_TOKEN=your_webservice_token\n</code></pre> <p>Select this environment by running commands with <code>--env prod</code> or by setting <code>MOODLE_ENV=prod</code>.</p>"},{"location":"getting-started/quickstart/#3-test-your-setup","title":"3. Test Your Setup","text":"<p>List all available courses:</p> <pre><code>py-moodle courses list\n</code></pre> <p>You should see output like:</p> <pre><code>\u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 ID \u2503 Shortname                    \u2503 Fullname                          \u2503\n\u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 2  \u2502 my-first-course              \u2502 My first course                   \u2502\n\u2502 4  \u2502 my-second-course             \u2502 My second course                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"getting-started/quickstart/#4-try-some-commands","title":"4. Try Some Commands","text":"<p>Show course details: <pre><code>py-moodle courses show 2\n</code></pre></p> <p>Create a new course: <pre><code>py-moodle courses create --fullname \"Test Course\" --shortname \"test-001\"\n</code></pre></p> <p>Add content to a course: <pre><code>py-moodle modules add label --course-id 2 --section-id 1 --name \"Welcome\" --intro \"Welcome to the course!\"\n</code></pre></p>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the CLI Reference for all available commands</li> <li>Read the Configuration guide for advanced setup</li> <li>Browse API Reference to use py-moodle as a library</li> </ul> <p>Need Help?</p> <p>Use <code>py-moodle --help</code> or <code>py-moodle COMMAND --help</code> for detailed command information.</p>"}]}